// Code generated by MockGen. DO NOT EDIT.
// Source: upstream/upstream.go

// Package mocks is a generated GoMock package.
package mocks

import (
	blockdigest "github.com/bitmark-inc/bitmarkd/blockdigest"
	util "github.com/bitmark-inc/bitmarkd/util"
	zmqutil "github.com/bitmark-inc/bitmarkd/zmqutil"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockUpstreamIntf is a mock of UpstreamIntf interface
type MockUpstreamIntf struct {
	ctrl     *gomock.Controller
	recorder *MockUpstreamIntfMockRecorder
}

// MockUpstreamIntfMockRecorder is the mock recorder for MockUpstreamIntf
type MockUpstreamIntfMockRecorder struct {
	mock *MockUpstreamIntf
}

// NewMockUpstreamIntf creates a new mock instance
func NewMockUpstreamIntf(ctrl *gomock.Controller) *MockUpstreamIntf {
	mock := &MockUpstreamIntf{ctrl: ctrl}
	mock.recorder = &MockUpstreamIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpstreamIntf) EXPECT() *MockUpstreamIntfMockRecorder {
	return m.recorder
}

// ActiveInPastSeconds mocks base method
func (m *MockUpstreamIntf) ActiveInPastSeconds(arg0 time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveInPastSeconds", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ActiveInPastSeconds indicates an expected call of ActiveInPastSeconds
func (mr *MockUpstreamIntfMockRecorder) ActiveInPastSeconds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveInPastSeconds", reflect.TypeOf((*MockUpstreamIntf)(nil).ActiveInPastSeconds), arg0)
}

// CachedRemoteDigestOfLocalHeight mocks base method
func (m *MockUpstreamIntf) CachedRemoteDigestOfLocalHeight() blockdigest.Digest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CachedRemoteDigestOfLocalHeight")
	ret0, _ := ret[0].(blockdigest.Digest)
	return ret0
}

// CachedRemoteDigestOfLocalHeight indicates an expected call of CachedRemoteDigestOfLocalHeight
func (mr *MockUpstreamIntfMockRecorder) CachedRemoteDigestOfLocalHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachedRemoteDigestOfLocalHeight", reflect.TypeOf((*MockUpstreamIntf)(nil).CachedRemoteDigestOfLocalHeight))
}

// CachedRemoteHeight mocks base method
func (m *MockUpstreamIntf) CachedRemoteHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CachedRemoteHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// CachedRemoteHeight indicates an expected call of CachedRemoteHeight
func (mr *MockUpstreamIntfMockRecorder) CachedRemoteHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachedRemoteHeight", reflect.TypeOf((*MockUpstreamIntf)(nil).CachedRemoteHeight))
}

// Client mocks base method
func (m *MockUpstreamIntf) Client() zmqutil.ClientIntf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(zmqutil.ClientIntf)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockUpstreamIntfMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockUpstreamIntf)(nil).Client))
}

// Connect mocks base method
func (m *MockUpstreamIntf) Connect(arg0 *util.Connection, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockUpstreamIntfMockRecorder) Connect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockUpstreamIntf)(nil).Connect), arg0, arg1)
}

// ConnectedTo mocks base method
func (m *MockUpstreamIntf) ConnectedTo() *zmqutil.Connected {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedTo")
	ret0, _ := ret[0].(*zmqutil.Connected)
	return ret0
}

// ConnectedTo indicates an expected call of ConnectedTo
func (mr *MockUpstreamIntfMockRecorder) ConnectedTo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedTo", reflect.TypeOf((*MockUpstreamIntf)(nil).ConnectedTo))
}

// Destroy mocks base method
func (m *MockUpstreamIntf) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy
func (mr *MockUpstreamIntfMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockUpstreamIntf)(nil).Destroy))
}

// GetBlockData mocks base method
func (m *MockUpstreamIntf) GetBlockData(arg0 uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockData", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockData indicates an expected call of GetBlockData
func (mr *MockUpstreamIntfMockRecorder) GetBlockData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockData", reflect.TypeOf((*MockUpstreamIntf)(nil).GetBlockData), arg0)
}

// IsConnectedTo mocks base method
func (m *MockUpstreamIntf) IsConnectedTo(arg0 []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnectedTo", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnectedTo indicates an expected call of IsConnectedTo
func (mr *MockUpstreamIntfMockRecorder) IsConnectedTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnectedTo", reflect.TypeOf((*MockUpstreamIntf)(nil).IsConnectedTo), arg0)
}

// IsConnected mocks base method
func (m *MockUpstreamIntf) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected
func (mr *MockUpstreamIntfMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockUpstreamIntf)(nil).IsConnected))
}

// LocalHeight mocks base method
func (m *MockUpstreamIntf) LocalHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// LocalHeight indicates an expected call of LocalHeight
func (mr *MockUpstreamIntfMockRecorder) LocalHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalHeight", reflect.TypeOf((*MockUpstreamIntf)(nil).LocalHeight))
}

// Name mocks base method
func (m *MockUpstreamIntf) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockUpstreamIntfMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUpstreamIntf)(nil).Name))
}

// RemoteAddr mocks base method
func (m *MockUpstreamIntf) RemoteAddr() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteAddr indicates an expected call of RemoteAddr
func (mr *MockUpstreamIntfMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockUpstreamIntf)(nil).RemoteAddr))
}

// RemoteDigestOfHeight mocks base method
func (m *MockUpstreamIntf) RemoteDigestOfHeight(arg0 uint64) (blockdigest.Digest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteDigestOfHeight", arg0)
	ret0, _ := ret[0].(blockdigest.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteDigestOfHeight indicates an expected call of RemoteDigestOfHeight
func (mr *MockUpstreamIntfMockRecorder) RemoteDigestOfHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteDigestOfHeight", reflect.TypeOf((*MockUpstreamIntf)(nil).RemoteDigestOfHeight), arg0)
}

// RemoteHeight mocks base method
func (m *MockUpstreamIntf) RemoteHeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteHeight indicates an expected call of RemoteHeight
func (mr *MockUpstreamIntfMockRecorder) RemoteHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteHeight", reflect.TypeOf((*MockUpstreamIntf)(nil).RemoteHeight))
}

// ResetServer mocks base method
func (m *MockUpstreamIntf) ResetServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetServer")
}

// ResetServer indicates an expected call of ResetServer
func (mr *MockUpstreamIntfMockRecorder) ResetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetServer", reflect.TypeOf((*MockUpstreamIntf)(nil).ResetServer))
}

// ServerPublicKey mocks base method
func (m *MockUpstreamIntf) ServerPublicKey() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerPublicKey")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ServerPublicKey indicates an expected call of ServerPublicKey
func (mr *MockUpstreamIntfMockRecorder) ServerPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerPublicKey", reflect.TypeOf((*MockUpstreamIntf)(nil).ServerPublicKey))
}
