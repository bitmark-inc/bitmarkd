// Code generated by MockGen. DO NOT EDIT.
// Source: ../storage/handle.go

// Package mocks is a generated GoMock package.
package mocks

import (
	storage "github.com/bitmark-inc/bitmarkd/storage"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHandle is a mock of Handle interface
type MockHandle struct {
	ctrl     *gomock.Controller
	recorder *MockHandleMockRecorder
}

// MockHandleMockRecorder is the mock recorder for MockHandle
type MockHandleMockRecorder struct {
	mock *MockHandle
}

// NewMockHandle creates a new mock instance
func NewMockHandle(ctrl *gomock.Controller) *MockHandle {
	mock := &MockHandle{ctrl: ctrl}
	mock.recorder = &MockHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandle) EXPECT() *MockHandleMockRecorder {
	return m.recorder
}

// Begin mocks base method
func (m *MockHandle) Begin() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Begin")
}

// Begin indicates an expected call of Begin
func (mr *MockHandleMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockHandle)(nil).Begin))
}

// Commit mocks base method
func (m *MockHandle) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockHandleMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockHandle)(nil).Commit))
}

// Has mocks base method
func (m *MockHandle) Has(arg0 []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockHandleMockRecorder) Has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockHandle)(nil).Has), arg0)
}

// Ready mocks base method
func (m *MockHandle) Ready() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ready indicates an expected call of Ready
func (mr *MockHandleMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockHandle)(nil).Ready))
}

// Get mocks base method
func (m *MockHandle) Get(arg0 []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockHandleMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHandle)(nil).Get), arg0)
}

// GetN mocks base method
func (m *MockHandle) GetN(arg0 []byte) (uint64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetN", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetN indicates an expected call of GetN
func (mr *MockHandleMockRecorder) GetN(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetN", reflect.TypeOf((*MockHandle)(nil).GetN), arg0)
}

// GetNB mocks base method
func (m *MockHandle) GetNB(arg0 []byte) (uint64, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNB", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// GetNB indicates an expected call of GetNB
func (mr *MockHandleMockRecorder) GetNB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNB", reflect.TypeOf((*MockHandle)(nil).GetNB), arg0)
}

// LastElement mocks base method
func (m *MockHandle) LastElement() (storage.Element, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastElement")
	ret0, _ := ret[0].(storage.Element)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LastElement indicates an expected call of LastElement
func (mr *MockHandleMockRecorder) LastElement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastElement", reflect.TypeOf((*MockHandle)(nil).LastElement))
}

// NewFetchCursor mocks base method
func (m *MockHandle) NewFetchCursor() *storage.FetchCursor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFetchCursor")
	ret0, _ := ret[0].(*storage.FetchCursor)
	return ret0
}

// NewFetchCursor indicates an expected call of NewFetchCursor
func (mr *MockHandleMockRecorder) NewFetchCursor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFetchCursor", reflect.TypeOf((*MockHandle)(nil).NewFetchCursor))
}

// Put mocks base method
func (m *MockHandle) Put(arg0, arg1, arg2 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", arg0, arg1, arg2)
}

// Put indicates an expected call of Put
func (mr *MockHandleMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockHandle)(nil).Put), arg0, arg1, arg2)
}

// PutN mocks base method
func (m *MockHandle) PutN(arg0 []byte, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutN", arg0, arg1)
}

// PutN indicates an expected call of PutN
func (mr *MockHandleMockRecorder) PutN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutN", reflect.TypeOf((*MockHandle)(nil).PutN), arg0, arg1)
}

// Remove mocks base method
func (m *MockHandle) Remove(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0)
}

// Remove indicates an expected call of Remove
func (mr *MockHandleMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockHandle)(nil).Remove), arg0)
}

// MockRetrieve is a mock of Retrieve interface
type MockRetrieve struct {
	ctrl     *gomock.Controller
	recorder *MockRetrieveMockRecorder
}

// MockRetrieveMockRecorder is the mock recorder for MockRetrieve
type MockRetrieveMockRecorder struct {
	mock *MockRetrieve
}

// NewMockRetrieve creates a new mock instance
func NewMockRetrieve(ctrl *gomock.Controller) *MockRetrieve {
	mock := &MockRetrieve{ctrl: ctrl}
	mock.recorder = &MockRetrieveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRetrieve) EXPECT() *MockRetrieveMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRetrieve) Get(arg0 []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockRetrieveMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRetrieve)(nil).Get), arg0)
}

// GetN mocks base method
func (m *MockRetrieve) GetN(arg0 []byte) (uint64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetN", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetN indicates an expected call of GetN
func (mr *MockRetrieveMockRecorder) GetN(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetN", reflect.TypeOf((*MockRetrieve)(nil).GetN), arg0)
}

// GetNB mocks base method
func (m *MockRetrieve) GetNB(arg0 []byte) (uint64, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNB", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// GetNB indicates an expected call of GetNB
func (mr *MockRetrieveMockRecorder) GetNB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNB", reflect.TypeOf((*MockRetrieve)(nil).GetNB), arg0)
}

// LastElement mocks base method
func (m *MockRetrieve) LastElement() (storage.Element, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastElement")
	ret0, _ := ret[0].(storage.Element)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LastElement indicates an expected call of LastElement
func (mr *MockRetrieveMockRecorder) LastElement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastElement", reflect.TypeOf((*MockRetrieve)(nil).LastElement))
}

// NewFetchCursor mocks base method
func (m *MockRetrieve) NewFetchCursor() *storage.FetchCursor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFetchCursor")
	ret0, _ := ret[0].(*storage.FetchCursor)
	return ret0
}

// NewFetchCursor indicates an expected call of NewFetchCursor
func (mr *MockRetrieveMockRecorder) NewFetchCursor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFetchCursor", reflect.TypeOf((*MockRetrieve)(nil).NewFetchCursor))
}

// MockUpdate is a mock of Update interface
type MockUpdate struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateMockRecorder
}

// MockUpdateMockRecorder is the mock recorder for MockUpdate
type MockUpdateMockRecorder struct {
	mock *MockUpdate
}

// NewMockUpdate creates a new mock instance
func NewMockUpdate(ctrl *gomock.Controller) *MockUpdate {
	mock := &MockUpdate{ctrl: ctrl}
	mock.recorder = &MockUpdateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdate) EXPECT() *MockUpdateMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockUpdate) Put(arg0, arg1, arg2 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", arg0, arg1, arg2)
}

// Put indicates an expected call of Put
func (mr *MockUpdateMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockUpdate)(nil).Put), arg0, arg1, arg2)
}

// PutN mocks base method
func (m *MockUpdate) PutN(arg0 []byte, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutN", arg0, arg1)
}

// PutN indicates an expected call of PutN
func (mr *MockUpdateMockRecorder) PutN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutN", reflect.TypeOf((*MockUpdate)(nil).PutN), arg0, arg1)
}

// Remove mocks base method
func (m *MockUpdate) Remove(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0)
}

// Remove indicates an expected call of Remove
func (mr *MockUpdateMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockUpdate)(nil).Remove), arg0)
}

// MockQuery is a mock of Query interface
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// Has mocks base method
func (m *MockQuery) Has(arg0 []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockQueryMockRecorder) Has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockQuery)(nil).Has), arg0)
}

// Ready mocks base method
func (m *MockQuery) Ready() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ready indicates an expected call of Ready
func (mr *MockQueryMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockQuery)(nil).Ready))
}
