// Code generated by MockGen. DO NOT EDIT.
// Source: ../ownership/setup.go

// Package mocks is a generated GoMock package.
package mocks

import (
	account "github.com/bitmark-inc/bitmarkd/account"
	ownership "github.com/bitmark-inc/bitmarkd/ownership"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOwnership is a mock of Ownership interface
type MockOwnership struct {
	ctrl     *gomock.Controller
	recorder *MockOwnershipMockRecorder
}

// MockOwnershipMockRecorder is the mock recorder for MockOwnership
type MockOwnershipMockRecorder struct {
	mock *MockOwnership
}

// NewMockOwnership creates a new mock instance
func NewMockOwnership(ctrl *gomock.Controller) *MockOwnership {
	mock := &MockOwnership{ctrl: ctrl}
	mock.recorder = &MockOwnershipMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOwnership) EXPECT() *MockOwnershipMockRecorder {
	return m.recorder
}

// ListBitmarksFor mocks base method
func (m *MockOwnership) ListBitmarksFor(arg0 *account.Account, arg1 uint64, arg2 int) ([]ownership.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBitmarksFor", arg0, arg1, arg2)
	ret0, _ := ret[0].([]ownership.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBitmarksFor indicates an expected call of ListBitmarksFor
func (mr *MockOwnershipMockRecorder) ListBitmarksFor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBitmarksFor", reflect.TypeOf((*MockOwnership)(nil).ListBitmarksFor), arg0, arg1, arg2)
}
