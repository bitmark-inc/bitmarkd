#!/bin/sh
# script to create a new bitmarkd instance

ERROR()
{
  printf 'error: '
  printf "$@"
  printf '\n'
  exit 1
}

VERBOSE()
{
  if [ X"${verbose}" = X"yes" ]
  then
    printf "$@"
    printf '\n'
  fi
}

WARNING()
{
  printf 'WARNING: '
  printf "$@"
  printf '\n'
}

USAGE()
{
  if [ -n "$1" ]
  then
    printf 'error: '
    printf "$@"
    printf '\n'
  fi
  echo usage: $(basename "$0") '[options] index-numbers...'
  echo '       --help                -h            this message'
  echo '       --verbose             -v            more messages'
  echo '       --chain=chain         -c CHAIN      set the chain [bitmark|testing|local]: ['"${network}"']'
  echo '       --nodes=DOMAIN        -n DOMAIN     set the nodes [none|chain|nodes.domain.tld]: ['"${nodes}"']'
  echo '       --connect=K:H:P       -C K:H:P      connect to specific bitmarkd public_key:host:port'
  echo '       --payment=PRD         -p PRD        set payment mode [p2p|rest|discovery]: ['"${payment_mode}"']'
  echo '       --recorderd-public    -r            allow external recorderd connections for local chain'
  echo '       --console             -k            log to console'
  echo '       --more                -m            more logging output'
  echo '       --update              -u            overwrite an existing configuration, does not change exiting keys'
  echo '       --debug               -D            debuging messages'
  exit 1
}


# main program

xdg_home="${XDG_CONFIG_HOME}"
[ -z "${xdg_home}" ] && xdg_home="${HOME}/.config"
[ -d "${xdg_home}" ] || ERROR 'missing directory: "%s" please create first' "${xdg_home}"

verbose=no
chain=local
nodes=none
bitmark_connect=
payment_mode=discovery
recorderd_public=0
log_size=1048576
log_count=100
log_console=false
log_default=error
debug=no
update=no

# detect GNU getopt
getopt=
case "$(uname)" in
  (FreeBSD|DragonFly)
    getopt=/usr/local/bin/getopt
    ;;
  (NetBSD)
    getopt=/usr/pkg/bin/getopt
    ;;
  (OpenBSD)
    getopt=/usr/local/bin/gnugetopt
    ;;
  (Darwin)
    getopt=/usr/local/opt/gnu-getopt/bin/getopt
    ;;
  (Linux)
    getopt=/usr/bin/getopt
    ;;
  (*)
    ERROR 'OS: %s is not supported' "$(uname)"
    ;;
esac
[ -x "${getopt}" ] || ERROR 'getopt: "%s" is not executable or not installed' "${getopt}"

args=$(${getopt} -o hvc:n:C:p:rkmuD --long=help,verbose,chain:,nodes:,connect:,payment:,recorderd-public,console,more,update,debug -- "$@") || exit 1

# replace the arguments with the parsed values
eval set -- "${args}"

while :
do
  case "${1}" in
    (-v|--verbose)
      verbose=yes
      ;;

    (-c|--chain)
      testnet_only=''
      livenet_only="${comment_string}"
      case "${2}" in
        (bitmark)
          chain=bitmark
          testnet_only="${comment_string}"
          livenet_only=''
          ;;
        (testing)
          chain=testing
          ;;
        (local)
          chain=local
          ;;
        (*)
          ERROR 'invalid chain: %s' "${2}"
          ;;
      esac
      shift
      ;;

    (-n|--nodes)
      case "${2}" in
        (none|chain)
          nodes="${2}"
          ;;
        (*.*)
          nodes="${2}"
          n=$(host -t TXT "${nodes}")
          [ $? -ne 0 ] && USAGE 'nodes cannot fetch TXT record for: "%s"' "${nodes}"
          [ -z "${n}" ] && USAGE 'nodes cannot empty TXT record for: "%s"' "${nodes}"
          ;;
        (*)
          ERROR 'invalid nodes: %s' "${2}"
          ;;
      esac
      shift
      ;;

    (-C|--connect)
      conn="${2}"
      [ -z "${conn}" ] && USAGE 'bitmarkd connect cannot be empty'
      shift
      bitmarkd_connect="${bitmarkd_connect} ${conn}"
      ;;

    (-p|--payment)
      case "${2}" in
        (p|p2p)
          payment_mode=p2p
          ;;
        (r|rest)
          payment_mode=rest
          ;;
        (d|discovery)
          payment_mode=discovery
          ;;
        (*)
          USAGE 'invalid payment verification mode: %s' "${2}"
          ;;
      esac
      shift
      ;;

    (-r|--recorderd-public)
      recorderd_public=1
      ;;

    (-k|--console)
      log_console=true
      ;;

    (-m|--more)
      case "${log_default}" in
        (error)
          log_default=warn
          ;;
        (warn)
          log_default=info
          ;;
        (info)
          log_default=debug
          ;;
        (debug|trace)
          log_default=trace
          ;;
        (*)
          log_default=info
          ;;
      esac
      ;;

    (-u|--update)
      update=yes
      ;;

    (-D|--debug)
      debug=yes
      ;;

    (--)
      shift
      break
      ;;

    (-h|--help)
      USAGE
      ;;

    (*)
      USAGE 'invalid option: %s' "$1"
      ;;
  esac
  shift
done

# verify arguments
[ $# -eq 0 ] && USAGE "missing arguments"

# enable debugging
[ X"${debug}" = X"yes" ] && set -x

# make static connections
connections=''
for conn in ${bitmarkd_connect}
do
  public_key="${conn%%:*}"
  [ X"${public_key#PUBLIC:}" = X"${public_key}" ] && public_key="PUBLIC:${public_key}"
  address="${conn#*:}"
  connections="${connections}$(printf '        {\\n            public_key = \\"%s\\",\\n            address = \\"%s\\"\\n        },\\n' "${public_key}" "${address}")"
done

# process all arguments can be 1..99 or T1..T99 0r L1..L99
# T = testnet   L = livenet
for i in "$@"
do
  external_net_comment=
  j="${i#[LT]}"
  [ X"${j}" != X"${i}" ] && external_net_comment="${comment_string}"

  [ "${j}" -lt 1 -o "${j}" -gt 99 ] && ERROR 'index is out of range: %s' "${j}"

  dir="${xdg_home}/bitmarkd${i}"
  config="${dir}/bitmarkd.conf"

  # stop if a config exists and not update
  [ X"${update}" = X"no" ] && [ -d "${dir}" -o -f "${config}" ] && ERROR 'index: %s is already used: %s' "${i}" "${dir}"

  port_offset=$(( 100 * ( j - 1 ) ))
  [ -d "${dir}" ] || mkdir -p "${dir}"

  VERBOSE 'config: %s  ports: %d' "${config}" "${port_offset}"
  VERBOSE 'recorderd IPv4: %s  IPv6: %s' "${recorderd_ipv4}" "${recorderd_ipv6}"

  # just for demonstration
  bitcoin_key="cPcHEqnqNG3Ze27Yqqxk8fQXmFVAgme1h1UT3HBN3MV4gERUVbVc"
  bitcoin_test="msxN7C7cRNgbgyUzt3EcvrpmWXc59sZVN4"
  bitcoin_live="1HeFjMrDTjheiZrBYViLGgjovRZK9Ba5EQ"

  litecoin_key="cUhoPFEKgWzxX9Ycynemjtvh4kEv3vcoVW6RgLaxzEVTGHFWF6WY"
  litecoin_test="mjPkDNakVA4w4hJZ6WF7p8yKUV2merhyCM"
  litecoin_live="LYg45SVcJALHWHSMVkHSKAnbAEXAbhei7h"

  awk < "$(dirname "${0}")/../command/bitmarkd/bitmarkd.conf.sample" > "${config}" '

    BEGIN {
      check_logging = 0
      skip_proofing = 0
      recorderd_public = '"${recorderd_public}"'
      chain = "'"${chain}"'"
      nodes = "'"${nodes}"'"
      port_offset = '"${port_offset}"'
      connections = "'"${connections}"'"
      payment_mode = "'"${payment_mode}"'"
      bitcoin_test = "'"${bitcoin_test}"'"
      bitcoin_live = "'"${bitcoin_live}"'"
      litecoin_test = "'"${litecoin_test}"'"
      litecoin_live = "'"${litecoin_live}"'"
      log_size = '"${log_size}"'
      log_count = '"${log_count}"'
      log_console = "'"${log_console}"'"
      # add quotes and trailing ',' to simplify comparisons
      log_default = "\"'"${log_default}"'\","
      drop_this = 0
    }

    # special logging detection
    /^M[.]logging/ {
      check_logging = 1
    }

    # special to detect proofing block
    /^M[.]proofing/ {
      skip_proofing = recorderd_public
    }

    # end of proofing block
    /^}/ {
      skip_proofing = 0
    }

    # change payment mode
    /mode[[:space:]]+=[[:space:]]+"p2p",/ {
      print "    mode = \"" payment_mode "\","
      drop_this = 1
    }

    # uncomment the right data directory line
    # as all config are in XDG_CONFIG_HOME
    /^(--)?M[.]data_directory/ {
      sub("^--", "", $0)
      if (match($0, "arg")) {
        print $0
      } else {
        print "--" $0
      }
      drop_this = 1
    }

    # set nodes domain
    /^M[.]nodes/ {
      print "M.nodes = \"" nodes "\""
      drop_this = 1
    }

    # coins
    /"[*][*][*]REPLACE-WITH-REAL-TEST-BTC-ADDRESS[*][*][*]",/ {
      print "    test = \"" bitcoin_test"\","
      drop_this = 1
    }
    /"[*][*][*]REPLACE-WITH-REAL-LIVE-BTC-ADDRESS[*][*][*]",/ {
      print "    live = \"" bitcoin_live "\","
      drop_this = 1
    }
    /"[*][*][*]REPLACE-WITH-REAL-TEST-LTC-ADDRESS[*][*][*]",/ {
      print "    test = \"" litecoin_test "\","
      drop_this = 1
    }
    /"[*][*][*]REPLACE-WITH-REAL-LIVE-LTC-ADDRESS[*][*][*]",/ {
      print "    live = \"" litecoin_live "\","
      drop_this = 1
    }

    # port_offset for bitmarkds 2..N
    /^[[:space:]]*local[[:space:]]+port_offset/ {
      if ($1 == "local" && $2 == "port_offset" && $3 == "=") {
        $4 = port_offset
        print "    " $0
        drop_this = 1
      }
    }

    # block all lines to replace
    {
      if (!check_logging) {
        # ensure "local" uses localhost
        if (chain == "local" && !skip_proofing) {
          if (match($0, "add_port[(]\"0[.]0[.]0[.]0\",")) {
             sub("\"0[.]0[.]0[.]0\"", "\"127.0.0.1\"", $0)
          } else if (match($0, "add_port[(]\"::\",")) {
             sub("\"::\"", "\"::1\"", $0)
          }
        }
        if (!drop_this) {
          print $0
        }
      }
      drop_this = 0
    }

    # set the chain
    /^--local chain = "local"/ {
      print "local chain = \"" chain "\""
    }

    # announce for local
    /^local[[:space:]]+announce_ips/ {
        if (chain == "local") {
            print "    \"::1\","
        }
    }

    # static connections
    /connect[[:space:]]+=/ {
      print connections
    }

    # logging and remainder of the config file
    check_logging {
      if ($1 == "size") {
        print "    size = " log_size ","
      } else if ($1 == "count") {
        print "    count = " log_count ","
      } else if ($1 == "console") {
        print "    console = " log_console ","
      } else if ($1 == "DEFAULT") {
        if ($3 == log_default) {
          print $0
        } else {
          $1 = $1 # strip leading spaces from $0
          print "        -- " $0
        }
      } else if ($2 == "DEFAULT" && $4 == log_default) {
        print "        DEFAULT = " log_default
      } else {
        print $0
      }
    }
'

  # create identity files based on generated configuration
  run-bitmarkd --config="%${i}" --generate
done
