#!/bin/sh
# script to create a new bitmarkd instance

ERROR()
{
  printf 'error: '
  printf "$@"
  printf '\n'
  exit 1
}

VERBOSE()
{
  if [ X"${verbose}" = X"yes" ]
  then
    printf "$@"
    printf '\n'
  fi
}

WARNING()
{
  printf 'WARNING: '
  printf "$@"
  printf '\n'
}

USAGE()
{
  if [ -n "$1" ]
  then
    printf 'error: '
    printf "$@"
    printf '\n'
  fi
  cat <<EOF
usage: ${##*/0} [options] index-numbers...
       --help                -h            this message
       --verbose             -v            more messages
       --chain=chain         -c CHAIN      set the chain [bitmark|testing|local]: [${chain}]
       --nodes=DOMAIN        -n DOMAIN     set the nodes [none|chain|nodes.domain.tld]: [${nodes}]
       --connect=K:H:P       -C K:H:P      connect to specific bitmarkd public_key:host:port
       --payment=PRD         -p PRD        set payment mode [p2p|rest|noverify]: [${payment_mode}]
       --recorderd-public    -r            allow external recorderd connections for local chain
       --internal-hash       -i            internal hash for local
       --profile             -P            enable 2132 HTTP profile port
       --ipv4-only           -4            turn off IPv6 preference
       --console             -k            log to console
       --more                -m            more logging output
       --auto-verify         -a            make all payments optional and auto-verify all tx
       --read-only           -R            set read-only mode
       --standalone          -S            set standalone mode
       --update              -u            overwrite an existing configuration, does not change exiting keys
       --debug               -D            show debug information
EOF
  exit 1
}


# main program

xdg_home="${XDG_CONFIG_HOME}"
[ -z "${xdg_home}" ] && xdg_home="${HOME}/.config"
[ -d "${xdg_home}" ] || ERROR 'missing directory: "%s" please create first' "${xdg_home}"

verbose=no
debug=no
chain=local
nodes=none
bitmarkd_connect=
payment_mode=noverify
recorderd_public=0
internal_hash=false
profile=false
prefer_ipv6=true
log_size=1048576
log_count=100
log_console=false
log_default=error
auto_verify=false
read_only=false
standalone=false
update=no


# parse options
while getopts :hvc:n:C:p:riP4kmauD-: option
do
  # convert long options
  if [ X"${option}" = X"-" ]
  then
    option="${OPTARG%%=*}"
    OPTARG="${OPTARG#${option}}"
    OPTARG="${OPTARG#=}"
  fi
  case "${option}" in
    (v|verbose)
      verbose=yes
      ;;

    (c|chain)
      case "${OPTARG}" in
        (bitmark)
          chain=bitmark
          ;;
        (testing)
          chain=testing
          ;;
        (local)
          chain=local
          ;;
        (*)
          ERROR 'invalid chain: %s' "${OPTARG}"
          ;;
      esac
      ;;

    (n|nodes)
      case "${OPTARG}" in
        (none|chain)
          nodes="${OPTARG}"
          ;;
        (*.*)
          nodes="${OPTARG}"
          n=$(host -t TXT "${nodes}") || USAGE 'nodes cannot fetch TXT record for: "%s"' "${nodes}"
          [ -z "${n}" ] && USAGE 'nodes cannot empty TXT record for: "%s"' "${nodes}"
          ;;
        (*)
          ERROR 'invalid nodes: %s' "${OPTARG}"
          ;;
      esac
      ;;

    (C|connect)
      conn="${OPTARG}"
      [ -z "${conn}" ] && USAGE 'bitmarkd connect cannot be empty'
      bitmarkd_connect="${bitmarkd_connect} ${conn}"
      ;;

    (p|payment)
      case "${OPTARG}" in
        (p|p2p)
          payment_mode=p2p
          ;;
        (r|rest)
          payment_mode=rest
          ;;
        (n|noverify)
          payment_mode=noverify
          ;;
        (*)
          USAGE 'invalid payment verification mode: %s' "${OPTARG}"
          ;;
      esac
      ;;

    (r|recorderd-public)
      recorderd_public=1
      ;;

    (i|internal-hash)
      internal_hash=true
      ;;

    (P|profile)
      profile=true
      ;;

    (4|ipv4-only)
      prefer_ipv6=false
      ;;

    (k|console)
      log_console=true
      ;;

    (a|auto-verify)
      auto_verify=true
      ;;

    (R|read-only)
      read_only=true
      ;;

    (S|standalone)
      standalone=true
      ;;

    (m|more)
      case "${log_default}" in
        (error)
          log_default=warn
          ;;
        (warn)
          log_default=info
          ;;
        (info)
          log_default=debug
          ;;
        (debug|trace)
          log_default=trace
          ;;
        (*)
          log_default=info
          ;;
      esac
      ;;

    (u|update)
      update=yes
      ;;

    (--)
      break
      ;;

    (D|debug)
      debug=yes
      ;;

    (h|help)
      USAGE
      ;;

    ('?')
      USAGE 'invalid option: -%s' "${OPTARG}"
      ;;

    (*)
      USAGE 'invalid option: --%s' "${option}"
      ;;
  esac
done

shift $((OPTIND - 1))

# verify arguments
#[ ${#} -ne 0 ] && USAGE 'extraneous arguments: %s' "${*}"
[ $# -eq 0 ] && USAGE "missing arguments"

# enable debugging
[ X"${debug}" = X"yes" ] && set -x

# make static connections
connections=''
for conn in ${bitmarkd_connect}
do
  public_key="${conn%%:*}"
  [ X"${public_key#PUBLIC:}" = X"${public_key}" ] && public_key="PUBLIC:${public_key}"
  address="${conn#*:}"
  connections="${connections}$(printf '        {\\n            public_key = \\"%s\\",\\n            address = \\"%s\\"\\n        },\\n' "${public_key}" "${address}")"
done

# process all arguments can be 1..99 or T1..T99 0r L1..L99
# T = testnet   L = livenet
for i in "$@"
do
  j="${i#[LT]}"

  [ "${j}" -ge 1 ] && [ "${j}" -le 99 ] || ERROR 'index is out of range: %s' "${j}"

  dir="${xdg_home}/bitmarkd${i}"
  config="${dir}/bitmarkd.conf"

  # stop if a config exists and not update
  if [ X"${update}" = X"no" ]
  then
    [ -d "${dir}" ] || [ -f "${config}" ] && ERROR 'index: %s is already used: %s' "${i}" "${dir}"
  fi

  port_offset=$(( 100 * ( j - 1 ) ))
  [ -d "${dir}" ] || mkdir -p "${dir}"

  VERBOSE 'config: %s  ports: %d' "${config}" "${port_offset}"

  # just for demonstration
  ## bitcoin_key="cPcHEqnqNG3Ze27Yqqxk8fQXmFVAgme1h1UT3HBN3MV4gERUVbVc"
  bitcoin_test="msxN7C7cRNgbgyUzt3EcvrpmWXc59sZVN4"
  bitcoin_live="1HeFjMrDTjheiZrBYViLGgjovRZK9Ba5EQ"

  ## litecoin_key="cUhoPFEKgWzxX9Ycynemjtvh4kEv3vcoVW6RgLaxzEVTGHFWF6WY"
  litecoin_test="mjPkDNakVA4w4hJZ6WF7p8yKUV2merhyCM"
  litecoin_live="LYg45SVcJALHWHSMVkHSKAnbAEXAbhei7h"

  ## litecoin_key="cRJAxVH5NHkqontyHrz3uMrLaJ7517MGQBo1RXnGxLhyEh7BqPm3"
  #litecoin_test="QbsRp4j7av6ShGvYgiWdETDM98xjGwsJ5q"
  #litecoin_live=""

  awk < "$(dirname "${0}")/../command/bitmarkd/bitmarkd.conf.sub" > "${config}" \
      -v recorderd_public="${recorderd_public}" \
      -v chain="${chain}" \
      -v nodes="${nodes}" \
      -v profile="${profile}" \
      -v prefer_ipv6="${prefer_ipv6}" \
      -v internal_hash="${internal_hash}" \
      -v port_offset="${port_offset}" \
      -v connections="${connections}" \
      -v payment_mode="${payment_mode}" \
      -v auto_verify="${auto_verify}" \
      -v read_only="${read_only}" \
      -v standalone="${standalone}" \
      -v bitcoin_test="${bitcoin_test}" \
      -v bitcoin_live="${bitcoin_live}" \
      -v litecoin_test="${litecoin_test}" \
      -v litecoin_live="${litecoin_live}" \
      -v log_size="${log_size}" \
      -v log_count="${log_count}" \
      -v log_console="${log_console}" \
      -v log_default="${log_default}" \
    '

    BEGIN {
      check_logging = 0
      skip_proofing = 0
      in_payment = 0
      drop_this = 0
    }

    # special logging detection
    /^M[.]logging/ {
      check_logging = 1
    }

    # detect read_only
    /^M[.]read_only/ {
      drop_this = 1
      print "M.read_only = " read_only
    }

    # detect standalone
    /^M[.]standalone/ {
      drop_this = 1
      print "M.standalone = " standalone
    }

    # special to detect proofing block
    /^M[.]proofing/ {
      skip_proofing = recorderd_public
    }

    # end of proofing block
    /^}/ {
      skip_proofing = 0
    }

    # detect start of payment block
    /^M[.]payment/ {
      in_payment = 1
    }

    /auto_verify[[:space:]]+=/ && in_payment {
      print "    auto_verify = " auto_verify ","
      in_payment = 0
      drop_this = 1
    }

    # uncomment the right data directory line
    # as all config are in XDG_CONFIG_HOME
    /^(--)?M[.]data_directory/ {
      sub("^--", "", $0)
      if (match($0, "arg")) {
        print $0
      } else {
        print "--" $0
      }
      drop_this = 1
    }

    # set nodes domain
    /^M[.]nodes/ {
      print "M.nodes = \"" nodes "\""
      drop_this = 1
    }

    # global variables
    /dofile[(]"bitmarkd.conf.sub"[)]/ {
      print "chain = \"" chain "\""

      print "announce_ips = {"
      if (chain == "local") {
        print "    \"::1\","
      }
      print "}"

      print "bitcoin_address = {"
      print "    test = \"" bitcoin_test"\","
      print "    live = \"" bitcoin_live "\","
      print "}"
      print "litecoin_address = {"
      print "    test = \"" litecoin_test "\","
      print "    live = \"" litecoin_live "\","
      print "}"
      # various settings
      print "payment_mode = \"" payment_mode "\""
      print "log_level = \"" log_default "\""
      print "prefer_ipv6 = " prefer_ipv6
      print "enable_profiling = " profile
    }

    # port_offset for bitmarkds 2..N
    /^[[:space:]]*local[[:space:]]+port_offset/ {
      if ($1 == "local" && $2 == "port_offset" && $3 == "=") {
        $4 = port_offset
        print "    " $0
        drop_this = 1
      }
    }

    # enable internal hashing
    /^[[:space:]]*local_use_internal_hash/ {
        print "    local_use_internal_hash = " internal_hash ","
        drop_this = 1
    }

    # block all lines to replace
    {
      if (!check_logging) {
        # ensure "local" uses localhost
        if (chain == "local" && !skip_proofing) {
          if (match($0, "add_port[(]\"[*]\",")) {
             l6 = $0
             sub("\"[*]\"", "\"::1\"", l6)
             print l6
             sub("\"[*]\"", "\"127.0.0.1\"", $0)
          }
        }
        if (!drop_this) {
          print $0
        }
      }
      drop_this = 0
    }

    # static connections
    /connect[[:space:]]+=/ {
      print connections
    }

    # logging and remainder of the config file
    check_logging {
      if ($1 == "size") {
        print "    size = " log_size ","
      } else if ($1 == "count") {
        print "    count = " log_count ","
      } else if ($1 == "console") {
        print "    console = " log_console ","
      } else {
        print $0
      }
    }
'

  # create identity files based on generated configuration
  run-bitmarkd --config="%${i}" --generate
done
