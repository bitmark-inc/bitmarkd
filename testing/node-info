#!/bin/sh
# get information from bitmarkd servers

# all available servers
servers=''
ip='[::1]'
port_base=22131
for s in $(seq 1 12)
do
  port=$(( port_base + ( s - 1 ) * 100 ))
  servers="${servers} ${ip}:${port}"
done

ERROR()
{
  printf 'error: '
  # shellcheck disable=SC2059
  printf -- "$@"
  printf '\n'
  exit 1
}

VERBOSE()
{
  # shellcheck disable=SC2059
  [ X"${verbose}" = X"yes" ] && printf -- "$@"
}

USAGE()
{
  if [ -n "$1" ]
  then
    printf 'error: '
    # shellcheck disable=SC2059
    printf -- "$@"
    printf '\n'
  fi
  echo usage: "$(basename "$0")" '[options] [N...|all]'
  echo '       --help             -h            this message'
  echo '       --verbose          -v            more messages'
  echo '       --repeat           -r            clear screen and display like top'
  echo '       --debug            -D            debuging messages'
  exit 1
}


# main program
verbose=no
repeat=no
debug=no

getopt=
case "$(uname)" in
  (FreeBSD|DragonFly)
    getopt=/usr/local/bin/getopt
    ;;
  (NetBSD)
    getopt=/usr/pkg/bin/getopt
    ;;
  (OpenBSD)
    getopt=/usr/local/bin/gnugetopt
    ;;
  (Darwin)
    getopt=/usr/local/opt/gnu-getopt/bin/getopt
    ;;
  (Linux)
    getopt=/usr/bin/getopt
    ;;
  (*)
    ERROR 'OS: %s is not supported' "$(uname)"
    ;;
esac
[ -x "${getopt}" ] || ERROR 'getopt: "%s" is not executable or not installed' "${getopt}"

args=$(${getopt} -o hvrD --long=help,verbose,repeat,debug -- "$@") || exit 1

# replace the arguments with the parsed values
eval set -- "${args}"

while :
do
  case "$1" in
    (-v|--verbose)
      verbose=yes
      ;;

    (-r|--repeat)
      repeat=yes
      ;;

    (-D|--debug)
      debug=yes
      ;;

    (--)
      shift
      break
      ;;

    (-h|--help)
      USAGE
      ;;

    (*)
      USAGE 'invalid option: %s' "$1"
      ;;
  esac
  shift
done

# verify arguments
[ $# -ne 0 ] && USAGE 'invalid extraneous arguments'

# enable debuging
[ X"${debug}" = X"yes" ] && set -x

VERBOSE 'servers: %s\n' "${servers}"

ONCE() {
  keys='{'
  n=0
  for s in ${servers}
  do
    n=$((n + 1))
    printf '%+d' "${n}"
    host="${s%:*}"
    port="${s##*:}"
    r=$(curl -sk "https://${host}:${port}/bitmarkd/details" "https://${host}:${port}/bitmarkd/connections")
    rc="$?"

    if [ -z "${r}" ] || [ "${rc}" -ne 0 ]
    then
      #printf 'timeout: rc: %s  r: "%s"\n' "${rc}" "${r}"
      eval info_${n}='{}'
      continue
    fi

    r=$(printf '%s' "${r}" | jq --slurp '{node:.[0],conn:.[1].connectedTo}' 2> /dev/null)

    eval info_${n}="'${r}'"
    keys="${keys}\"$(printf '%s' "${r}" | jq --raw-output .node.publicKey 2> /dev/null)\":${n},"

  done
  keys="${keys}\"\":9999}"
  printf '\n'

  # shellcheck disable=SC2016
  filter='
    def rj($f;$w): ("          "+($f|tostring))[-$w:];
    def lj($f;$w): (($f|tostring)+"          ")[:$w];
    "\u001b[1;32mb: \u001b[1;33m" + rj(.node.block.count.local;2) +
    "\u001b[0;33m " + (.node.block.hash[56:64]+"--------")[:8] +
    "  \u001b[" + (if .node.mode=="Normal" then "1;32" else "0;31" end) + "m" + .node.mode[0:6] +
    "  \u001b[0;36m" + .node.chain +
    "  \u001b[1;34mp: " + rj(.node.transactionCounters.pending;3) +
    "  \u001b[1;31mv: " + rj(.node.transactionCounters.verified;3) +
    "  \u001b[1;35msw: " + (.node.version|tostring) +
    "  \u001b[1;34min: " + rj(.node.peers.incoming;2) +
    "  \u001b[1;31mout: " + rj(.node.peers.outgoing;2) +
    "  \u001b[1;33mc: [" + (.conn|map($keys[.server])|map(if . == null then 0 else . end) |
      reduce .[] as $n (
        "................" | split("");
        .[$n]=(if 0==$n then "?" else [$n + 96]|implode end)
      ) | join("")|tostring) + "]" +
    "  \u001b[0;37mup: " + (.node.uptime|sub("[.][0-9]*s";"s")) +
    "\u001b[0m"'

  n=0
  for s in ${servers}
  do
    n=$((n + 1))
    eval "info=\"\${info_${n}}\""
    # shellcheck disable=SC2154
    r=$(printf '%s' "${info}" | jq --raw-output --argjson keys "${keys}" "${filter}" 2> /dev/null)
    [ -z "${r}" ] && r='OFFLINE'
    printf '[%2d]: %s\n' "${n}" "${r}"

  done
}

if [ X"${repeat}" = X"yes" ]
then
  while :
  do
    clear
    ONCE
    sleep 10
  done
else
  ONCE
fi
