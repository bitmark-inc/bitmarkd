-- bitmarkd.conf.sub  -*- mode: lua -*-

-- define the following global variables then
-- return this files result e.g.:
--
--     chain = "bitmark" -- OR: "testing"
--
--     bitcoin_address = {
--         test = "***REPLACE-WITH-REAL-TEST-BTC-ADDRESS***",
--         live = "***REPLACE-WITH-REAL-LIVE-BTC-ADDRESS***",
--     }
--     litecoin_address = {
--         test = "***REPLACE-WITH-REAL-TEST-LTC-ADDRESS***",
--         live = "***REPLACE-WITH-REAL-LIVE-LTC-ADDRESS***",
--     }
--
--     -- EITHER: specific IPs
--     announce_ips = {
--         "a.b.c.d",  -- IPv4
--         "x::y:z",   -- IPv6
--     }
--     -- OR:     interface IPs
--     announce_ips = interface_public_ips
--
--     -- other global variables for some more advanced features
--     -- normally these can be left as nil:
--     --    https_allow, local_connections, payment_mode,
--     --    prefer_ipv6, log_level
--
--     return dofile("bitmarkd.conf.sub")


------------------------------------------------------------------------
-- Advanced configuration below this point
------------------------------------------------------------------------

local M = {}

-- Read the named file in under the specified data directory
-- M.data_directory and return the contents.
function read_file(name)
    local f, err = io.open(M.data_directory .. "/" .. name, "r")
    if f == nil then
        return nil
    end
    local r = f:read("*a")
    f:close()
    return r
end


-- port selections based on chain selected
-- bitmark:  XXXX
-- testing: 1XXXX
-- local:   2XXXX
-- use "*" for listen all on both ipv4 and ipv6
function add_port(ip, port)
    local port_base = 20000
    local port_offset = 0 -- special setting to run multiple bitmarkds
    if M.chain == "bitmark" then
        port_base = 0
    end
    if M.chain == "testing" then
        port_base = 10000
    end
    local suffix = ":" .. (port_base + port_offset + port)
    -- check OS via global os_name to deal with single/dual stack
    -- dual stack allow single listen on "*"
    -- non-dual stack two separate IPv6 ("[::]") and IPv4 ("0.0.0.0") entries
    if ip == "*" then
        if os_name == "freebsd" or  os_name == "linux" then
            return "*" .. suffix
        end
        -- OS has separate IPv4 and IPv6 so need both
        return "[::]" .. suffix, "0.0.0.0" .. suffix
    end
    -- wrap unwrapped IPv6
    if ip:match(":") and ip:sub(1, 1) ~= "[" then
        ip = "[" .. ip .. "]"
    end
    return ip .. suffix
end

-- Let the node announce itself (ip:port) to the network.
-- The ip should be provided using environment variables
-- either PUBLIC_IPV4 or PUBLIC_IPV6, or both
-- depend on the public IP addresses of the node.
function make_announcements(port)
    local announcements = {}
    for k, v in pairs(announce_ips) do
        announcements[#announcements+1] = add_port(v, port)
    end

    -- set the public IP addresses
    local public_ipv4 = os.getenv("PUBLIC_IPV4")
    if public_ipv4 ~= nil and public_ipv4 ~= "" then
        announcements[#announcements+1] = add_port(public_ipv4, port)
    end

    local public_ipv6 = os.getenv("PUBLIC_IPV6")
    if public_ipv6 ~= nil and public_ipv6 ~= "" then
        announcements[#announcements+1] = add_port(public_ipv6, port)
    end

    -- expand table to return list
    return unpack(announcements)
end


-- set the directory for data and log files
--M.data_directory = arg[0]:match("^(.*/)")  -- dir from configuration file
--M.data_directory = "."                     -- current directory
M.data_directory = "/var/lib/bitmarkd"    -- absolute path


-- optional pid file if not absolute path then it is created relative to
-- the data directory
--M.pidfile = "bitmarkd.pid"

-- select the chain of the network for peer connections
-- cross chain networking connects will not work
M.chain = chain

-- select the default node configuration
-- choose from: none, chain OR sub.domain.tld
M.nodes = nodes or "chain"

-- cache directory if not absolute path then it is created relative to
-- the data directory
M.cache_directory = M.chain .. "-cache"

-- fast sync mode introduces a new mechanism for initial synchronization
-- that speeds up the bitmark node to get it ready operating.
M.fast_sync = true
M.dns_peers_only = false

-- for JSON clients on TLS connection
M.client_rpc = {

    maximum_connections = 50,
    bandwidth = 25000000,

    listen = {
        -- NOTICE: use "*" for listen all on both ipv4 and ipv6
       add_port("*", 2130),
       --  add_port("0.0.0.0", 2130),
    },

    -- announce certain public IP:ports to network
    -- if using firewall port forwarding use the firewall external IP:port
    announce = {
        -- add_port("a.b.c.d", 2130),
        -- add_port("x::y:z", 2130),

        -- only use if minimum announce setup varible is set
        -- or if PUBLIC_IPV[46] variables are set
        make_announcements(2130),
    },

    certificate = read_file("rpc.crt"),
    private_key = read_file("rpc.key")
}


-- for local monitoring
M.https_rpc = {

    maximum_connections = 100,
    bandwidth = 25000000,

    -- POST /bitmarkd/rpc          (unrestricted: json body as client rpc)
    -- GET  /bitmarkd/details      (protected: more data than Node.Info))
    -- GET  /bitmarkd/peers        (protected: list of all peers and their public key)
    -- GET  /bitmarkd/connections  (protected: list of all outgoing peer connections)

    listen = {
        add_port("*", 2131),
    },

    -- IP networks in CIDR form that can access the /bitmarkd/* GET APIs
    -- default is deny
    allow = {
        details = https_allow or{
            "127.0.0.0/8",
            "::1/128",
        },
        connections = https_allow or {
            "127.0.0.0/8",
            "::1/128",
        },
        peers = https_allow or {
            "127.0.0.0/8",
            "::1/128",
        }
    },

    -- this example shares keys with client rpc
    certificate = read_file("rpc.crt"),
    private_key = read_file("rpc.key")
}

-- peer-to-peer connections
M.peering = {

    -- set node type (server|client)
    -- this will be set to "server" if announcing any public IPs
    -- (see code below)
    nodetype = "client",

    -- for incoming peer connections
      listen = {
        -- NOTICE: use "*" for listen all on both ipv4 and ipv6
        add_port("*", 2136),
        -- add_port("0.0.0.0", 2136)
    },

    -- announce certain public IP:ports to network
    -- if using firewall port forwarding use the firewall external IP:port
    announce = {
        -- add_port("a.b.c.d", 2136),
        -- add_port("x::y:z", 2136),

        -- only use if minimum announce setup varible is set
        -- or if PUBLIC_IPV[46] variables are set
        make_announcements(2136),
    },
    secret_key = read_file("peer.secret"),
}

-- automatically set node type (server|client)
-- set server mode only if announcing some public IPs
-- otherwise client mode
M.peering.nodetype = ((type(M.peering.announce) == "table" and #M.peering.announce > 0 and "server") or "client")


-- optional transaction/block publishing for subscribers to receive various announcements
-- intended for local services
M.publishing = {

    broadcast = {
        add_port("*", 2135),
    },

    -- ok to use the same keys as peer
    public_key = read_file("publishing.public"),
    private_key = read_file("publishing.private")
}


-- configuration of recorderd connections
M.proofing = {

    -- local chain (regression) use internal hash instead of recorderd
    local_use_internal_hash = false,

    public_key = read_file("proof.public"),
    private_key = read_file("proof.private"),
    signing_key = read_file(M.chain == "bitmark" and "proof.live" or "proof.test"),

    -- payments for future transfers auto detected from *coin_address at the top of this file
    payment_address = {
        bitcoin = M.chain == "bitmark" and bitcoin_address.live or bitcoin_address.test,
        litecoin = M.chain == "bitmark" and litecoin_address.live or litecoin_address.test,
    },

    publish = {
        add_port("*", 2138),
    },
    submit = {
        add_port("*", 2139),
    },
}

-- determine proxy addresses based on the chain selected
function proxy_address()
    local proxy = {
        sub_endpoint = "127.0.0.1:18008",
        req_endpoint = "127.0.0.1:18009",
    }
    if M.chain == "bitmark" then
        proxy.sub_endpoint = "dsc-1.live.bitmark.com:17008"
        proxy.req_endpoint = "dsc-1.live.bitmark.com:17009"
    end
    if M.chain == "testing" then
        proxy.sub_endpoint = "coins.test.bitmark.com:16008"
        proxy.req_endpoint = "coins.test.bitmark.com:16009"
    end
    return proxy
end

-- determine port address based on chain selected
function bitcoin_port()
    local port = 18443
    if M.chain == "bitmark" then
        port = "8332"
    end
    if M.chain == "testing" then
        port = "18332"
    end
    return port
end

function litecoin_port()
    local port = "19443"
    if M.chain == "bitmark" then
        port = "9332"
    end
    if M.chain == "testing" then
        port = "19332"
    end
    return port
end

-- special override for a local regression testing node
if M.chain == "local" and p2p_bootstrap_nodes == nil then
    p2p_bootstrap_nodes = {
        bitcoin = {
            "127.0.0.1:18444",
        },
        litecoin = {
            "127.0.0.1:19444",
        },
    }
end


-- setup for every payment service
M.payment = {

    -- the mode must be one of the following: p2p, discovery, rest, noverify
    mode = payment_mode or "p2p",
    p2p_cache = {
        btc_directory = M.chain .. "-btc-cache",
        ltc_directory = M.chain .. "-ltc-cache"
    },
    bootstrap_nodes = p2p_bootstrap_nodes or {
        bitcoin = {},
        litecoin = {}
    },

    -- setup proxy addresses based on selected chain
    -- required if the mode is set to "rest"
    discovery = proxy_address(),

    -- local bitcoin access to REST API
    -- required if the mode is set to "rest"
    bitcoin = {
        url = "http://127.0.0.1:" .. bitcoin_port() .. "/rest"
    },

    -- local litecoin access to REST API
    -- required if the mode is set to "rest"
    litecoin = {
        url = "http://127.0.0.1:" .. litecoin_port() .. "/rest"
    }
}


-- configure global or specific logger channel levels
M.logging = {
    size = 100000,
    count = 10,

    -- set to true to log to console
    console = false,

    -- set the logging level for various modules
    -- modules not overridden with get the value from DEFAULT
    -- the default value for DEFAULT is "critical"
    levels = {
        -- DEFAULT = "debug",
        -- DEFAULT = "info",
        -- DEFAULT = "warn",
        -- DEFAULT = "error",
        DEFAULT = log_level or "error",

        -- some specific logging channels: (there may be others)
        -- announce = "info",
        -- announcer = "info",
        -- asset = "info",
        -- asset-expiry = "info",
        -- bitcoin = "info",
        -- block = "info",
        -- blockheader = "info",
        -- blockrecord = "info",
        -- blockstore = "info",
        -- broadcaster = "info",
        -- checker = "info",
        -- connector = "info",
        -- discoverer = "info",
        -- expiration = "info",
        -- listener = "info",
        -- litecoin = "info",
        -- BTC_watcher = "info",
        -- LTC_watcher = "info",
        -- main = "info",
        -- mode = "info",
        -- nodeslookup = "info",
        -- payment = "info",
        -- peer = "info",
        -- proof = "info",
        -- publish = "info",
        -- publisher = "info",
        -- rebroadcaster = "info",
        -- reservoir = "info",
        -- rpc = "info",
        -- submission = "info",
        -- ["upstream@1"] = "info",
        -- ["upstream@2"] = "info",
        -- ["upstream@3"] = "info",
        -- ["upstream@4"] = "info",
        -- ["upstream@5"] = "info",
        -- ["upstream@6"] = "info",
        -- ["upstream@7"] = "info",
        -- ["upstream@8"] = "info",
        -- ["upstream@9"] = "info",
        -- ["upstream@10"] = "info",
    }
}


-- return the complete configuration
return M
