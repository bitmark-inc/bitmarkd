-- bitmarkd.conf  -*- mode: lua -*-

-- Minimum Items To Setup:
-- 1. Select appropriate chain
-- 2. Setup all test and live crypto currency addresses
-- 3. If running a publicly visible node set up annouce_ips
-- 4. Ensure _external_NAT_firewall_ forwards correct ports
--    (as a minimum, forward:  2130 and  2136 for bitmark blockchain
--                        or: 12130 and 12136 for testing blockchain)

-- [1] select the chain of the network for peer connections
--     cross chain networking connects will not work
-- Uncomment One:
--chain = "bitmark"
--chain = "testing"
--chain = "local"   -- for regression testing only

-- [2] setup coin addresses for recorder payments
--     the chain selection above will determine which
--     address to use
bitcoin_address = {
    test = "***REPLACE-WITH-REAL-TEST-BTC-ADDRESS***",
    live = "***REPLACE-WITH-REAL-LIVE-BTC-ADDRESS***",
}
litecoin_address = {
    test = "***REPLACE-WITH-REAL-TEST-LTC-ADDRESS***",
    live = "***REPLACE-WITH-REAL-LIVE-LTC-ADDRESS***",
}

-- [3] public IPs of firewall or external interface
--     Either or both IPv4 and IPv6 can be added depending
--     on the network settings
announce_ips = {
    --"a.b.c.d",  -- IPv4
    --"x::y:z",   -- IPv6
}

------------------------------------------------------------------------
-- Optionally override with "interface_public_ips"
-- see:
--   RFC 4921 (IPv6 Addressing Architecture)
-- This global variable excludes addresses defined by:
--   RFC 1918 (Address Allocation for Private Internets)
--   RFC 3927 (Dynamic Configuration of IPv4 Link-Local Addresses)
--   RFC 4193 (Unique Local IPv6 Unicast Addresses)
------------------------------------------------------------------------
--announce_ips = interface_public_ips

------------------------------------------------------------------------
-- allow specific CIDRs to access the HTTPS monitoring port
-- set nil to restict only to localhost
https_allow = nil
-- http_allow = {
--     "127.0.0.0/8",
--     "::1/128",
-- }

p2p_bootstrap_nodes = {
    bitcoin = {
        "127.0.0.1:18444",
    },
    litecoin = {
        "127.0.0.1:19444",
    }
}

-- set log level default value
--log_level = "error"

-- return the complete configuration
local d = arg[0]:match("^(.*/)") or ""
return dofile(d .. "bitmarkd.conf.sub")
