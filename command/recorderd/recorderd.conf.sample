-- recorderd.conf  -*- mode: lua -*-

-- This configuration file is set for local bitmarkd by default.
--
-- For connecting to another machine running bitmarkd adjust the
-- parameters in the "connect" item.  Multiple connections are
-- supported.

local M = {}

-- helper functions
function read_file(name)
    local f, err = io.open(M.data_directory .. "/" .. name, "r")
    if f == nil then
        return nil
    end
    local r = f:read("*a")
    f:close()
    return r
end

-- set the directory for data and log files
--M.data_directory = arg[0]:match("(.*/)")  -- dir from configuration file
--M.data_directory = "."                    -- current directory
M.data_directory = "/var/lib/recorderd"   -- absolute path

-- optional pid file if not absolute path then is created relative to
-- the data directory
--M.pidfile = "recorderd.pid"

-- maximum percentage of cpu computation power used for hashing
-- counts in terms of total cpu cores, e.g. 50% of 8 cpu cores will be 4 threads utilized
-- default: 50
M.max_cpu_usage = 50

-- schedule time recorderd runs
-- time is denoted by hour:minute, hour is denoted in 24-hour clock format
-- hour ranges from 0 - 24, minute ranges from 0 - 59
-- period is denoted as start:stop, start time must be earlier than stop time, e.g. "13:00-14:00"
-- multiple time segment is separated by comma, e.g. "13:00-14:05, 15:20-16:34, 0:00-24:00"
-- for overnight scheduing, separate into two segments, e.g.: run from monday 15:00 to tuesday 3:00
-- monday = "15:00-24:00", tuesday = "0:00-3:00"
-- empty string means running all day
M.calendar = {
   sunday    = "",
   monday    = "",
   tuesday   = "",
   wednesday = "",
   thursday  = "",
   friday    = "",
   saturday  = ""
}

-- connect to bitmarkd
M.peering = {
    -- the miners keys
    public_key = read_file("recorderd.public"),
    private_key = read_file("recorderd.private"),

    -- connections to bitmarkd nodes
    connect = {
        -- default local bitmarkd connection
        {
            public_key = read_file("../bitmarkd/proof.public"),
            blocks = "127.0.0.1:2138",
            submit = "127.0.0.1:2139"
        },
        -- static IP connection
        -- {
        --     public_key = "***BITMARKD-PROOF-PUBLIC-KEY-INCLUDING-PUBLIC:-PREFIX***",
        --     blocks = "a.b.c.d:2138",
        --     submit = "a.b.c.d:2139"
        -- },
    }
}

-- logging configuration
M.logging = {
    size = 131072,
    count = 10,

    -- set to true to log to console
    console = false,

    -- set the logging level for various modules
    -- modules not overridden with get the value from DEFAULT
    -- the default value for DEFAULT is "critical"
    levels = {
        -- DEFAULT = "debug",
        -- DEFAULT = "info",
        DEFAULT = "warn",
        -- DEFAULT = "error",

        -- some specific logging channels: (there may be others)
        -- mode = "info",
        -- main = "info"
    }
}

-- return the complete configuration
return M
