// SPDX-License-Identifier: ISC
// Copyright (c) 2014-2019 Bitmark Inc.
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

package ownership

import (
	"bytes"
	"testing"

	"github.com/bitmark-inc/bitmarkd/merkle"
	"github.com/bitmark-inc/bitmarkd/transactionrecord"
	"github.com/bitmark-inc/bitmarkd/util"
)

// test the packing/unpacking of owner data record
//
// ensures that pack->unpack returns the same original value
func TestPackAssetData(t *testing.T) {

	expectedTxId := merkle.Digest{
		0xa7, 0x4a, 0x90, 0xc2, 0xff, 0x76, 0x34, 0x7a,
		0x9d, 0x34, 0x19, 0xe9, 0x20, 0x2f, 0x02, 0xd8,
		0xff, 0x5d, 0xdd, 0xa2, 0x7c, 0xc1, 0x7b, 0xa1,
		0x71, 0xbc, 0x7c, 0x68, 0xbc, 0xc9, 0xce, 0x49,
	}

	expectedAssetId := transactionrecord.AssetIdentifier{
		0x59, 0xd0, 0x61, 0x55, 0xd2, 0x5d, 0xff, 0xdb,
		0x98, 0x27, 0x29, 0xde, 0x8d, 0xce, 0x9d, 0x78,
		0x55, 0xca, 0x09, 0x4d, 0x8b, 0xab, 0x81, 0x24,
		0xb3, 0x47, 0xc4, 0x06, 0x68, 0x47, 0x70, 0x56,
		0xb3, 0xc2, 0x7c, 0xcb, 0x7d, 0x71, 0xb5, 0x40,
		0x43, 0xd2, 0x07, 0xcc, 0xd1, 0x87, 0x64, 0x2b,
		0xf9, 0xc8, 0x46, 0x6f, 0x9a, 0x8d, 0x0d, 0xbe,
		0xfb, 0x4c, 0x41, 0x63, 0x3a, 0x7e, 0x39, 0xef,
	}

	expected := PackedOwnerData{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
		0x39, 0xa7, 0x4a, 0x90, 0xc2, 0xff, 0x76, 0x34,
		0x7a, 0x9d, 0x34, 0x19, 0xe9, 0x20, 0x2f, 0x02,
		0xd8, 0xff, 0x5d, 0xdd, 0xa2, 0x7c, 0xc1, 0x7b,
		0xa1, 0x71, 0xbc, 0x7c, 0x68, 0xbc, 0xc9, 0xce,
		0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
		0xd2, 0x59, 0xd0, 0x61, 0x55, 0xd2, 0x5d, 0xff,
		0xdb, 0x98, 0x27, 0x29, 0xde, 0x8d, 0xce, 0x9d,
		0x78, 0x55, 0xca, 0x09, 0x4d, 0x8b, 0xab, 0x81,
		0x24, 0xb3, 0x47, 0xc4, 0x06, 0x68, 0x47, 0x70,
		0x56, 0xb3, 0xc2, 0x7c, 0xcb, 0x7d, 0x71, 0xb5,
		0x40, 0x43, 0xd2, 0x07, 0xcc, 0xd1, 0x87, 0x64,
		0x2b, 0xf9, 0xc8, 0x46, 0x6f, 0x9a, 0x8d, 0x0d,
		0xbe, 0xfb, 0x4c, 0x41, 0x63, 0x3a, 0x7e, 0x39,
		0xef,
	}
	a := AssetOwnerData{
		transferBlockNumber: 12345,
		issueTxId:           expectedTxId,
		issueBlockNumber:    1234,
		assetId:             expectedAssetId,
	}

	// test the packer
	packed := a.Pack()

	// if either of above fail we will have the message _without_ a signature
	if !bytes.Equal(packed, expected) {
		t.Errorf("pack record: %x  expected: %x", packed, expected)
		t.Errorf("*** GENERATED Packed:\n%s", util.FormatBytes("expected", packed))
		t.Fatal("fatal error")
	}

	unpacked, err := packed.Unpack()
	if nil != err {
		t.Fatalf("unpack error: %s", err)
	}

	ownerdata, ok := unpacked.(*AssetOwnerData)
	if !ok {
		t.Fatalf("unpacked to wrong type: %v", unpacked)
	}

	if a != *ownerdata {
		t.Errorf("record: %+v  expected: %+v", ownerdata, a)
	}
}

// test the packing/unpacking of owner data record
//
// ensures that pack->unpack returns the same original value
func TestPackBlockData(t *testing.T) {

	expectedTxId := merkle.Digest{
		0xa7, 0x4a, 0x90, 0xc2, 0xff, 0x76, 0x34, 0x7a,
		0x9d, 0x34, 0x19, 0xe9, 0x20, 0x2f, 0x02, 0xd8,
		0xff, 0x5d, 0xdd, 0xa2, 0x7c, 0xc1, 0x7b, 0xa1,
		0x71, 0xbc, 0x7c, 0x68, 0xbc, 0xc9, 0xce, 0x49,
	}

	expected := PackedOwnerData{
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
		0x39, 0xa7, 0x4a, 0x90, 0xc2, 0xff, 0x76, 0x34,
		0x7a, 0x9d, 0x34, 0x19, 0xe9, 0x20, 0x2f, 0x02,
		0xd8, 0xff, 0x5d, 0xdd, 0xa2, 0x7c, 0xc1, 0x7b,
		0xa1, 0x71, 0xbc, 0x7c, 0x68, 0xbc, 0xc9, 0xce,
		0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
		0xd2,
	}
	a := BlockOwnerData{
		transferBlockNumber: 12345,
		issueTxId:           expectedTxId,
		issueBlockNumber:    1234,
	}

	// test the packer
	packed := a.Pack()

	// if either of above fail we will have the message _without_ a signature
	if !bytes.Equal(packed, expected) {
		t.Errorf("pack record: %x  expected: %x", packed, expected)
		t.Errorf("*** GENERATED Packed:\n%s", util.FormatBytes("expected", packed))
		t.Fatal("fatal error")
	}

	unpacked, err := packed.Unpack()
	if nil != err {
		t.Fatalf("unpack error: %s", err)
	}

	ownerdata, ok := unpacked.(*BlockOwnerData)
	if !ok {
		t.Fatalf("unpacked to wrong type: %v", unpacked)
	}

	if a != *ownerdata {
		t.Errorf("record: %+v  expected: %+v", ownerdata, a)
	}
}

// test the packing/unpacking of owner data record
//
// ensures that pack->unpack returns the same original value
func TestPackShareData(t *testing.T) {

	expectedTxId := merkle.Digest{
		0xa7, 0x4a, 0x90, 0xc2, 0xff, 0x76, 0x34, 0x7a,
		0x9d, 0x34, 0x19, 0xe9, 0x20, 0x2f, 0x02, 0xd8,
		0xff, 0x5d, 0xdd, 0xa2, 0x7c, 0xc1, 0x7b, 0xa1,
		0x71, 0xbc, 0x7c, 0x68, 0xbc, 0xc9, 0xce, 0x49,
	}

	expectedAssetId := transactionrecord.AssetIdentifier{
		0x59, 0xd0, 0x61, 0x55, 0xd2, 0x5d, 0xff, 0xdb,
		0x98, 0x27, 0x29, 0xde, 0x8d, 0xce, 0x9d, 0x78,
		0x55, 0xca, 0x09, 0x4d, 0x8b, 0xab, 0x81, 0x24,
		0xb3, 0x47, 0xc4, 0x06, 0x68, 0x47, 0x70, 0x56,
		0xb3, 0xc2, 0x7c, 0xcb, 0x7d, 0x71, 0xb5, 0x40,
		0x43, 0xd2, 0x07, 0xcc, 0xd1, 0x87, 0x64, 0x2b,
		0xf9, 0xc8, 0x46, 0x6f, 0x9a, 0x8d, 0x0d, 0xbe,
		0xfb, 0x4c, 0x41, 0x63, 0x3a, 0x7e, 0x39, 0xef,
	}

	expected := PackedOwnerData{
		0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
		0x39, 0xa7, 0x4a, 0x90, 0xc2, 0xff, 0x76, 0x34,
		0x7a, 0x9d, 0x34, 0x19, 0xe9, 0x20, 0x2f, 0x02,
		0xd8, 0xff, 0x5d, 0xdd, 0xa2, 0x7c, 0xc1, 0x7b,
		0xa1, 0x71, 0xbc, 0x7c, 0x68, 0xbc, 0xc9, 0xce,
		0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
		0xd2, 0x59, 0xd0, 0x61, 0x55, 0xd2, 0x5d, 0xff,
		0xdb, 0x98, 0x27, 0x29, 0xde, 0x8d, 0xce, 0x9d,
		0x78, 0x55, 0xca, 0x09, 0x4d, 0x8b, 0xab, 0x81,
		0x24, 0xb3, 0x47, 0xc4, 0x06, 0x68, 0x47, 0x70,
		0x56, 0xb3, 0xc2, 0x7c, 0xcb, 0x7d, 0x71, 0xb5,
		0x40, 0x43, 0xd2, 0x07, 0xcc, 0xd1, 0x87, 0x64,
		0x2b, 0xf9, 0xc8, 0x46, 0x6f, 0x9a, 0x8d, 0x0d,
		0xbe, 0xfb, 0x4c, 0x41, 0x63, 0x3a, 0x7e, 0x39,
		0xef,
	}
	a := ShareOwnerData{
		transferBlockNumber: 12345,
		issueTxId:           expectedTxId,
		issueBlockNumber:    1234,
		assetId:             expectedAssetId,
	}

	// test the packer
	packed := a.Pack()

	// if either of above fail we will have the message _without_ a signature
	if !bytes.Equal(packed, expected) {
		t.Errorf("pack record: %x  expected: %x", packed, expected)
		t.Errorf("*** GENERATED Packed:\n%s", util.FormatBytes("expected", packed))
		t.Fatal("fatal error")
	}

	unpacked, err := packed.Unpack()
	if nil != err {
		t.Fatalf("unpack error: %s", err)
	}

	ownerdata, ok := unpacked.(*ShareOwnerData)
	if !ok {
		t.Fatalf("unpacked to wrong type: %v", unpacked)
	}

	if a != *ownerdata {
		t.Errorf("record: %+v  expected: %+v", ownerdata, a)
	}
}
