// SPDX-License-Identifier: ISC
// Copyright (c) 2014-2019 Bitmark Inc.
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

package transactionrecord_test

import (
	"crypto/rand"
	"os"
	"testing"

	"golang.org/x/crypto/ed25519"

	"github.com/bitmark-inc/bitmarkd/account"
	"github.com/bitmark-inc/bitmarkd/merkle"
	"github.com/bitmark-inc/bitmarkd/transactionrecord"
	"github.com/bitmark-inc/bitmarkd/util"
	"github.com/bitmark-inc/logger"
)

// remove all files created by test
func removeFiles() {
	os.RemoveAll("test.log")
}

// configure for testing
func setup(t *testing.T) {
	removeFiles()

	logger.Initialise(logger.Configuration{
		Directory: ".",
		File:      "test.log",
		Size:      50000,
		Count:     10,
	})
}

// post test cleanup
func teardown(t *testing.T) {
	logger.Finalise()
	removeFiles()
}

// to print a keypair for future tests
func TestGenerateKeypair(t *testing.T) {
	generate := false

	// generate = true // (uncomment to get a new key pair)

	if generate {
		// display key pair and fail the test
		// use the displayed values to modify data below
		publicKey, privateKey, err := ed25519.GenerateKey(rand.Reader)
		if nil != err {
			t.Errorf("key pair generation error: %s", err)
			return
		}
		t.Errorf("*** GENERATED:\n%s", util.FormatBytes("publicKey", publicKey))
		t.Errorf("*** GENERATED:\n%s", util.FormatBytes("privateKey", privateKey))
		return
	}
}

// to hold a keypair for testing
type keyPair struct {
	publicKey  []byte
	privateKey []byte
}

// public/private keys from above generate

var proofedBy = keyPair{
	publicKey: []byte{
		0x55, 0xb2, 0x98, 0x88, 0x17, 0xf7, 0xea, 0xec,
		0x37, 0x74, 0x1b, 0x82, 0x44, 0x71, 0x63, 0xca,
		0xaa, 0x5a, 0x9d, 0xb2, 0xb6, 0xf0, 0xce, 0x72,
		0x26, 0x26, 0x33, 0x8e, 0x5e, 0x3f, 0xd7, 0xf7,
	},
	privateKey: []byte{
		0x95, 0xb5, 0xa8, 0x0b, 0x4c, 0xdb, 0xe6, 0x1c,
		0x0f, 0x3f, 0x72, 0xcc, 0x15, 0x2d, 0x4a, 0x4f,
		0x29, 0xbc, 0xfd, 0x39, 0xc9, 0xa6, 0x7e, 0x2c,
		0x7b, 0xc6, 0xe0, 0xe1, 0x4e, 0xc7, 0xc7, 0xba,
		0x55, 0xb2, 0x98, 0x88, 0x17, 0xf7, 0xea, 0xec,
		0x37, 0x74, 0x1b, 0x82, 0x44, 0x71, 0x63, 0xca,
		0xaa, 0x5a, 0x9d, 0xb2, 0xb6, 0xf0, 0xce, 0x72,
		0x26, 0x26, 0x33, 0x8e, 0x5e, 0x3f, 0xd7, 0xf7,
	},
}

var registrant = keyPair{
	publicKey: []byte{
		0x7a, 0x81, 0x92, 0x56, 0x5e, 0x6c, 0xa2, 0x35,
		0x80, 0xe1, 0x81, 0x59, 0xef, 0x30, 0x73, 0xf6,
		0xe2, 0xfb, 0x8e, 0x7e, 0x9d, 0x31, 0x49, 0x7e,
		0x79, 0xd7, 0x73, 0x1b, 0xa3, 0x74, 0x11, 0x01,
	},
	privateKey: []byte{
		0x66, 0xf5, 0x28, 0xd0, 0x2a, 0x64, 0x97, 0x3a,
		0x2d, 0xa6, 0x5d, 0xb0, 0x53, 0xea, 0xd0, 0xfd,
		0x94, 0xca, 0x93, 0xeb, 0x9f, 0x74, 0x02, 0x3e,
		0xbe, 0xdb, 0x2e, 0x57, 0xb2, 0x79, 0xfd, 0xf3,
		0x7a, 0x81, 0x92, 0x56, 0x5e, 0x6c, 0xa2, 0x35,
		0x80, 0xe1, 0x81, 0x59, 0xef, 0x30, 0x73, 0xf6,
		0xe2, 0xfb, 0x8e, 0x7e, 0x9d, 0x31, 0x49, 0x7e,
		0x79, 0xd7, 0x73, 0x1b, 0xa3, 0x74, 0x11, 0x01,
	},
}

var issuer = keyPair{
	publicKey: []byte{
		0x9f, 0xc4, 0x86, 0xa2, 0x53, 0x4f, 0x17, 0xe3,
		0x67, 0x07, 0xfa, 0x4b, 0x95, 0x3e, 0x3b, 0x34,
		0x00, 0xe2, 0x72, 0x9f, 0x65, 0x61, 0x16, 0xdd,
		0x7b, 0x01, 0x8d, 0xf3, 0x46, 0x98, 0xbd, 0xc2,
	},
	privateKey: []byte{
		0xf3, 0xf7, 0xa1, 0xfc, 0x33, 0x10, 0x71, 0xc2,
		0xb1, 0xcb, 0xbe, 0x4f, 0x3a, 0xee, 0x23, 0x5a,
		0xae, 0xcc, 0xd8, 0x5d, 0x2a, 0x80, 0x4c, 0x44,
		0xb5, 0xc6, 0x03, 0xb4, 0xca, 0x4d, 0x9e, 0xc0,
		0x9f, 0xc4, 0x86, 0xa2, 0x53, 0x4f, 0x17, 0xe3,
		0x67, 0x07, 0xfa, 0x4b, 0x95, 0x3e, 0x3b, 0x34,
		0x00, 0xe2, 0x72, 0x9f, 0x65, 0x61, 0x16, 0xdd,
		0x7b, 0x01, 0x8d, 0xf3, 0x46, 0x98, 0xbd, 0xc2,
	},
}

var ownerOne = keyPair{
	publicKey: []byte{
		0x27, 0x64, 0x0e, 0x4a, 0xab, 0x92, 0xd8, 0x7b,
		0x4a, 0x6a, 0x2f, 0x30, 0xb8, 0x81, 0xf4, 0x49,
		0x29, 0xf8, 0x66, 0x04, 0x3a, 0x84, 0x1c, 0x38,
		0x14, 0xb1, 0x66, 0xb8, 0x89, 0x44, 0xb0, 0x92,
	},
	privateKey: []byte{
		0xc7, 0xae, 0x9f, 0x22, 0x32, 0x0e, 0xda, 0x65,
		0x02, 0x89, 0xf2, 0x64, 0x7b, 0xc3, 0xa4, 0x4f,
		0xfa, 0xe0, 0x55, 0x79, 0xcb, 0x6a, 0x42, 0x20,
		0x90, 0xb4, 0x59, 0xb3, 0x17, 0xed, 0xf4, 0xa1,
		0x27, 0x64, 0x0e, 0x4a, 0xab, 0x92, 0xd8, 0x7b,
		0x4a, 0x6a, 0x2f, 0x30, 0xb8, 0x81, 0xf4, 0x49,
		0x29, 0xf8, 0x66, 0x04, 0x3a, 0x84, 0x1c, 0x38,
		0x14, 0xb1, 0x66, 0xb8, 0x89, 0x44, 0xb0, 0x92,
	},
}

var ownerTwo = keyPair{
	publicKey: []byte{
		0xa1, 0x36, 0x32, 0xd5, 0x42, 0x5a, 0xed, 0x3a,
		0x6b, 0x62, 0xe2, 0xbb, 0x6d, 0xe4, 0xc9, 0x59,
		0x48, 0x41, 0xc1, 0x5b, 0x70, 0x15, 0x69, 0xec,
		0x99, 0x99, 0xdc, 0x20, 0x1c, 0x35, 0xf7, 0xb3,
	},
	privateKey: []byte{
		0x8f, 0x83, 0x3e, 0x58, 0x30, 0xde, 0x63, 0x77,
		0x89, 0x4a, 0x8d, 0xf2, 0xd4, 0x4b, 0x17, 0x88,
		0x39, 0x1d, 0xcd, 0xb8, 0xfa, 0x57, 0x22, 0x73,
		0xd6, 0x2e, 0x9f, 0xcb, 0x37, 0x20, 0x2a, 0xb9,
		0xa1, 0x36, 0x32, 0xd5, 0x42, 0x5a, 0xed, 0x3a,
		0x6b, 0x62, 0xe2, 0xbb, 0x6d, 0xe4, 0xc9, 0x59,
		0x48, 0x41, 0xc1, 0x5b, 0x70, 0x15, 0x69, 0xec,
		0x99, 0x99, 0xdc, 0x20, 0x1c, 0x35, 0xf7, 0xb3,
	},
}

// only used for public key since the private key is currently unknown
var theZeroKey = keyPair{
	publicKey: []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
	privateKey: []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	},
}

// helper to make an address
func makeAccount(publicKey []byte) *account.Account {
	return &account.Account{
		AccountInterface: &account.ED25519Account{
			Test:      true,
			PublicKey: publicKey,
		},
	}
}

// asset id is converted from little endian by fmt.Sscan
// but merkle digests are big endian so brovide a little endian routine
func merkleDigestFromLE(s string, link *merkle.Digest) error {
	// convert little endian hex text into a digest
	return link.UnmarshalText([]byte(s))
}

// try all length of incomplete record to ensure the case error
func checkPackedData(t *testing.T, title string, packed transactionrecord.Packed) {

loop:
	for i := 0; i < len(packed); i += 1 {
		// test the unpacker with bad records
		// one less than whole record to avoid any success
		//p := append(transactionrecord.Packed{}, packed[:i]...)
		p := make(transactionrecord.Packed, i)
		copy(p, packed[:i])
		unpacked, n, err := p.Unpack(true)
		if nil != err {
			continue loop
		}

		t.Errorf("unpack[%d](%s): unexpected success: record[:%d]: %+v", i, title, n, unpacked)
	}
}
