// Code generated by MockGen. DO NOT EDIT.
// Source: rpc/rpc.go

// Package mocks is a generated GoMock package.
package mocks

import (
	fingerprint "github.com/bitmark-inc/bitmarkd/announce/fingerprint"
	rpc "github.com/bitmark-inc/bitmarkd/announce/rpc"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRPC is a mock of RPC interface
type MockRPC struct {
	ctrl     *gomock.Controller
	recorder *MockRPCMockRecorder
}

// MockRPCMockRecorder is the mock recorder for MockRPC
type MockRPCMockRecorder struct {
	mock *MockRPC
}

// NewMockRPC creates a new mock instance
func NewMockRPC(ctrl *gomock.Controller) *MockRPC {
	mock := &MockRPC{ctrl: ctrl}
	mock.recorder = &MockRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRPC) EXPECT() *MockRPCMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockRPC) Add(arg0, arg1 []byte, arg2 uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockRPCMockRecorder) Add(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRPC)(nil).Add), arg0, arg1, arg2)
}

// Expire mocks base method
func (m *MockRPC) Expire() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Expire")
}

// Expire indicates an expected call of Expire
func (mr *MockRPCMockRecorder) Expire() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockRPC)(nil).Expire))
}

// Fetch mocks base method
func (m *MockRPC) Fetch(arg0 uint64, arg1 int) ([]rpc.Entry, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].([]rpc.Entry)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fetch indicates an expected call of Fetch
func (mr *MockRPCMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockRPC)(nil).Fetch), arg0, arg1)
}

// IsSet mocks base method
func (m *MockRPC) IsSet() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSet indicates an expected call of IsSet
func (mr *MockRPCMockRecorder) IsSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSet", reflect.TypeOf((*MockRPC)(nil).IsSet))
}

// Self mocks base method
func (m *MockRPC) Self() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Self")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Self indicates an expected call of Self
func (mr *MockRPCMockRecorder) Self() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Self", reflect.TypeOf((*MockRPC)(nil).Self))
}

// Set mocks base method
func (m *MockRPC) Set(arg0 fingerprint.Type, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockRPCMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRPC)(nil).Set), arg0, arg1)
}
