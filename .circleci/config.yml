# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2

jobs:
  test:
    docker:
      # specify the version
      - image: circleci/golang:1.13
        environment:
          - GO111MODULE: "on"

    working_directory: /go/src/github.com/bitmark-inc/bitmarkd
    steps:
      - checkout
      - run: sudo sh -c 'mkdir -p /etc/apt/source.list.d/'
      - run:
          name: Add repo testing
          command: |
            sudo sh -c 'echo "deb http://ftp.de.debian.org/debian/ testing main contrib non-free" >> /etc/apt/sources.list.d/testing.list'
            sudo sh -c 'echo "deb-src http://ftp.de.debian.org/debian/ testing main contrib non-free" >> /etc/apt/sources.list.d/testing.list'
            sudo sh -c 'echo "deb http://security.debian.org/ testing/updates  main contrib non-free" >> /etc/apt/source.list.d/testing.list'
      - run:
          name: Add repo stable
          command: |
            sudo sh -c 'echo "deb http://ftp.de.debian.org/debian/ stable main contrib non-free" >> /etc/apt/sources.list.d/stable.list'
            sudo sh -c 'echo "deb-src http://ftp.de.debian.org/debian/ stable main contrib non-free" >> /etc/apt/sources.list.d/stable.list'
            sudo sh -c 'echo "deb http://security.debian.org/ stable/updates  main contrib non-free" >> /etc/apt/source.list.d/stable.list'
      - run:
          name: Prepare environment
          command: |
            sudo apt-get update
            sudo apt-get -t testing install libargon2-1 libargon2-dev
            sudo apt-get install uuid-dev libzmq3-dev wget
            sudo apt-get -t testing install pkg-config
      - run:
          name: Get misspell
          command: |
             wget https://github.com/client9/misspell/releases/download/v0.3.4/misspell_0.3.4_linux_64bit.tar.gz
             tar -xpvf misspell_0.3.4_linux_64bit.tar.gz
      - run:
          name: Get gosec
          command: |
             wget https://github.com/securego/gosec/releases/download/v2.1.0/gosec_2.1.0_linux_amd64.tar.gz
             tar -xpvf gosec_2.1.0_linux_amd64.tar.gz
      - run:
          name: Get golangcli-lint
          command: |
             wget https://github.com/golangci/golangci-lint/releases/download/v1.21.0/golangci-lint-1.21.0-linux-amd64.tar.gz
             tar -xpvf golangci-lint-1.21.0-linux-amd64.tar.gz
             mv golangci-lint-1.21.0-linux-amd64/golangci-lint .
      - run:
          name: Get golint
          command: go get -v golang.org/x/lint/golint
      - run:
          name: Run golint
          command: golint ./...
      - run:
          name: Run go vet
          command: go vet ./...
      - run:
          name: run misspell
          command: ./misspell ./...
      - run:
          name: Run gosec
          command: ./gosec -exclude=G104,G204,G402,G304 ./...
      - run:
          name: Run golangcli-lint
          command: ./golangci-lint run --no-config --disable=ineffassign,errcheck,govet
  publish_image:
    docker:
      - image: bitmark/packer:1.4.5
    working_directory: /go/src/github.com/bitmark-inc/bitmarkd
    steps:
      - checkout
      - run:
          name: Validate configuration
          command: cd ./.circleci/packer && packer validate -only aws-ubuntu,aws-freebsd packer_build.json
      - run:
          name: Build AWS image
          command: cd ./.circleci/packer && packer build -force -only aws-ubuntu,aws-freebsd -var "bitmarkd_version=${CIRCLE_TAG:1}" packer_build.json
          # Only build the AWS image at this moment
          # This job assumes that the AWS environment configured well either by circleci context or project permissions

  publish_debian_package:
    docker:
      - image: bitmark/deb-builder
    working_directory: /bitmarkd
    steps:
      - checkout
      - run:
          name: Download dependencies
          command: go mod download
      - run:
          name: Prepare package tarfile
          command: |
            archive_version=$(dpkg-parsechangelog --show-field Version | cut -f1 -d-) && \
            archive_name="bitmarkd_${archive_version}.orig.tar.gz" && \
            transform_source="--transform=s@^@${service}_${archive_version}/@" && \
            curl -L --output ../${archive_name} --fail https://launchpad.net/~bitmark/+archive/ubuntu/bitmarkd/+files/${archive_name} || \
            ([ ! -f ../${archive_name} ] && tar zcf go.tar.gz $GOPATH && tar zcf "../${archive_name}" --exclude-vcs --exclude='debian' --exclude='vendor' --exclude=".circleci" ${transform_source} .)
      - run:
          name: Build debian package
          command: |
            archive_version=$(dpkg-parsechangelog --show-field Version | cut -f1 -d-) && \
            DEBFULLNAME="Jim Yeh" DEBEMAIL=jim@bitmark.com dch -a "release bitmark ${archive_version} to launchpad" -u medium -D bionic && \
            DEBFULLNAME="Jim Yeh" DEBEMAIL=jim@bitmark.com dch -r "" -u medium -D bionic && \
            echo "${gpg_key}" | base64 --decode | gpg --pinentry-mode loopback --passphrase "${gpg_passphrase}" --import -- && \
            debuild -S -sa -p"gpg --pinentry-mode loopback --passphrase ${gpg_passphrase}" --diff-ignore='.*'
      - run:
          name: Publish new build
          command: |
            release_version=$(dpkg-parsechangelog --show-field Version) && \
            dput ppa:bitmark/bitmarkd ../bitmarkd_${release_version}_source.changes

workflows:
  version: 2
  commit:
    jobs:
      - test
  release:
    jobs:
      - publish_image:
          context: bitmarkd
          filters:
            tags:
              only: /v\d+(.\d+){2}(-(alpha|beta))?/
              # since circleci use a different way to fetch git tags, the ssh client is required in our docker image
              # if a job requires another task, the required job must to have the same filter to this one.
            branches:
              ignore: /.*/

      - publish_debian_package:
          context: launchpad
          filters:
            tags:
              only: /v\d+(.\d+){2}(-(alpha|beta))?/
            branches:
              ignore: /.*/
