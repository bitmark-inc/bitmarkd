#!/bin/sh
# bitmark all commits in a git repository
dir=$(dirname "$0")

ERROR()
{
  printf 'error: '
  printf "$@"
  printf '\n'
  exit 1
}

VERBOSE() {
  [ X"${verbose}" = X"yes" ] || return
  printf -- "$@"
  printf '\n'
}

LOG() {
  [ -z "${logfile}" ] && return
  printf -- "$@" >> "${logfile}"
  printf '\n' >> "${logfile}"
}

USAGE()
{
  if [ -n "$1" ]
  then
    printf 'error: '
    printf "$@"
    printf '\n'
  fi
  echo usage: $(basename "$0") '[options]'
  echo '       --help             -h            this message'
  echo '       --verbose          -v            more messages'
  echo '       --remote=NAME      -r NAME       set remote name ['"${remote}"']'
  echo '       --url=URL-PREFIX   -p URL-PREFIX set URL prefix ['"${url}"']'
  echo '       --user=NAME        -u NAME       set blockchain user'
  echo '       --network=NET      -n NET        set blockchain network [bitmark|testing|local]: ['"${network}"']'
  echo '       --file=FILE        -f FILE       set alternative logfile ['"${logfile}"']'
  echo '       --list             -l            list properties for user'
  echo '       --status=FILE      -s FILE       check status from a specific logfile'
  echo '       --continue         -c            do not stop on transaction already exists'
  echo '       --debug                          debuging messages'
  exit 1
}

# global result value
r=''

# run a CLI command
# return:
#   0 => r = JSON response
#   1 => r = error string
CLI() {
  local user verbose check
  verbose=no
  check=yes
  while :
  do
    case "${1}" in
      (-v)
        verbose=yes
        shift
        ;;
      (-n)
        check=no
        shift
        ;;
      (*)
        break
        ;;
      esac
  done
  user="${1}"; shift
  [ X"${verbose}" = X"yes" ] && printf '\033[1;33mCLI[%s]: \033[1;31m%s\033[0m\n' "${network}/${user}" "$*"
  r=$(bitmark-cli -i "${user}" -p "${password}" -n "${network}" "$@" 2>&1)
  if [ X"${check}" = X"yes" -a $? -ne 0 ]
  then
    [ -z "${r}" ] && r='unknown error: stdout empty'
    r=$(jq --null-input --arg error "${r}" '{error:$error}')
    return 1
  fi
  return 0
}

PRETTY() {
  if [ $# -eq 0 ]
  then
    printf '%s' "${r}" | jq .
  else
    printf '%s' "${r}" | jq "$@"
  fi
}

READY() {
  local s mode blocks_q
  s=0
  printf 'waiting for sync -'
  while :
  do
    CLI -n "${user}" bitmarkd 2> /dev/null
    mode=$(GET .mode)
    [ X"${mode}" = X"Normal" ] && break
    SPINNER 1
  done
  printf '\bOK\n'

  blocks_q='
    (.block  | type) as $tb |
    (.blocks | type) as $ts |
    if $ts == "number" then
      .blocks
    elif $tb == "object" then
      .block.height
    else
      "INVALID"
    end
'
  SET chain .chain  blocks "${blocks_q}"  version .version  uptime .uptime
  [ X"${blocks}" = X"INVALID" ] && ERROR 'cannot connect to bitmarkd version: "%s"' "${version}"
}

BITMARKD() {
  READY
  printf 'chain: %s  blocks: %s  version: %s  uptime: %s\n\n' "${chain}" "${blocks}" "${version}" "${uptime}"
}

SPINNER() {
  local s n i
  n="${1}"
  s=0
  for i in 1 2 3 4 5 6 7 8
  do
    sleep 0.15
    case "${s}" in
      (0)
        printf -- '\bâ€”'
        ;;
      (1)
        printf -- '\b\\'
        ;;
      (2)
        printf -- '\b|'
        ;;
      (3)
        printf -- '\b/'
        ;;
    esac
    s=$(( s + n ))
    [ ${s} -lt 0 ] && s=3
    [ ${s} -gt 3 ] && s=0
  done
}

GET() {
  printf '%s' "${r}" | jq --raw-output "${1}"
}

# assign global vars
# pairs of: global-var jq-expression ...
SET() {
  local var val jq_expr
  [ $(( $# % 2 )) -ne 0 ] && ERROR 'SET with odd parameters: %s' "$#"
  while [ $# -ge 2 ]
  do
    var="${1}"; shift
    jq_expr="${1}"; shift
    val=$(GET "${jq_expr}")
    eval ${var}=\"\${val}\"
  done
}

SHOW-OWNERSHIP() {
  local q i n user

  user="${1}"; shift

  q='
def s($f): ("          "+($f|tostring))[-10:] + " ";
def n($f): (($f|tostring)+"          ")[:10] + " ";
.tx as $tx |
(.data | reduce .[] as $item (
  ""; . + n($item.item) + $item.txId + " " +
  if "Block" == $item.item
    then
      if $item.blockNumber == $tx[$item.txId].inBlock
        then "           BLOCK:" + s($item.blockNumber)
        else  s($tx[$item.txId].inBlock) + "BLOCK:" + s($item.blockNumber)
      end
    else s($tx[$item.txId].inBlock) +
         (if $tx[$item.assetId].data.name == ""
          then $tx[$item.assetId].data.fingerprint
          else $tx[$item.assetId].data.name
          end)
  end +
  "\n"))'

  printf -- 'Record     Transaction Id                                                   In Block   Name\n'
  printf -- '========== ================================================================ ========== ====================\n'

  i=0
  while :
  do
    CLI "${user}" owned -s "${i}" -c 20 -o "${user}"
    SET i .next  n '.data|length'
    [ ${n} -eq 0 ] && break
    PRETTY --join-output "${q}"
    #PRETTY --join-output --arg name "${user}" "."
  done

  printf '\n'
}

# read a logfile and print its status
SHOW-STATUS() {
  local file w0 w1 w2 w3 w4 w5 w6 junk status count errors unconfirmed
  file="${1}"
  [ -z "${file}" ] && return 1
  [ -f "${file}" ] || return 1

  cat "${file}" | (
    count=0
    errors=0
    unconfirmed=0
    while read w0 w1 w2 w3 w4 w5 w6 junk
    do
      # LOG '%6d: commit: %s   date: %s  issue_id: %s' "${i}" "${commit}" "${timestamp}" "${issue_id}"
      [ X"${w1}" = X"commit:" ] || continue
      count=$((count + 1))
      case "${w5}" in
        (issue_id:)
          CLI "${user}" status -t "${w6}"
          SET status '.status'
          printf '%6d: commit: %s  status: %s\n' "${count}" "${w2}" "${status}"
          [ X"Confirmed" != X"${status}" ] && unconfirmed=$((unconfirmed + 1))
          ;;
        (error:)
          errors=$((errors + 1))
          printf '%6d: commit: %s  error: %s\n' "${count}" "${w2}" "${w6} ${junk}"
          ;;
        (*)
          ;;
      esac
    done
    printf 'total records: %6d\n' "${count}"
    printf 'failed issue:  %6d\n' "${errors}"
    printf 'not confirmed: %6d\n' "${unconfirmed}"
  )
}

# main program
verbose=no
debug=no
url=
remote=origin
network=testing
user=
logfile="bmr-${network}-$(date '+%Y%m%d_%H%M%S').log"
list=no
status=
continue=no

# required programs
programs='jq bitmark-cli git'

# check programs are available
for p in ${programs}
do
  x=$(which "${p}")
  [ $? -ne 0 ] && ERROR 'program: "%s" is not on the path' "${p}"
  [ -x "${x}" ] || ERROR 'program: "%s" (%s) is not executable' "${p}" "${x}"
done

# decode command-line
getopt=
case "$(uname)" in
  (FreeBSD|DragonFly)
    getopt=/usr/local/bin/getopt
    ;;
  (NetBSD)
    getopt=/usr/pkg/bin/getopt
    ;;
  (OpenBSD)
    getopt=/usr/local/bin/gnugetopt
    ;;
  (Darwin)
    getopt=/usr/local/opt/gnu-getopt/bin/getopt
    ;;
  (Linux)
    getopt=/usr/bin/getopt
    ;;
  (*)
    ERROR 'OS: %s is not supported' "$(uname)"
    ;;
esac
[ -x "${getopt}" ] || ERROR 'getopt: "%s" is not executable or not installed' "${getopt}"

args=$(${getopt} -o hvp:n:u:f:lcs:D --long=help,verbose,url:,network:,user:,file:,list,continue,status:,debug -- "$@") || exit 1

# replace the arguments with the parsed values
eval set -- "${args}"

while :
do
  case "${1}" in
    (-v|--verbose)
      verbose=yes
      ;;

    (-r|--remote)
      [ -z "${2}" ] && ERROR 'remote cannot be blank'
      remote="${2}"
      shift
      ;;

    (-p|--url)
      [ -z "${2}" ] && ERROR 'url prefix cannot be blank'
      url="${2}"
      shift
      ;;

    (-n|--network)
      case "${2}" in
        (local|testing|bitmark)
          network="${2}"
          logfile="bmr-${network}-$(date '+%Y%m%d_%H%M%S').log"
          ;;
        (*)
          USAGE 'invalid network: "%s" use: [bitmark|testing|local]' "${2}"
          ;;
      esac
      shift
      ;;

    (-u|--user)
      [ -z "${2}" ] && ERROR 'user cannot be blank'
      user="${2}"
      shift
      ;;

    (-f|--file)
      [ -z "${2}" ] && ERROR 'file cannot be blank'
      logfile="${2}"
      shift
      ;;

    (-l|--list)
      list=yes
      ;;

    (-s|--status)
      [ -z "${2}" ] && ERROR 'ststus cannot be blank'
      status="${2}"
      shift
      ;;

    (-c|--continue)
      continue=yes
      ;;

    (-D|--debug)
      debug=yes
      ;;

    (--)
      shift
      break
      ;;

    (-h|--help)
      USAGE
      ;;

    (*)
      USAGE 'invalid option: %s' "$1"
      ;;
  esac
  shift
done

# verify arguments
[ -z "${remote}" ] && ERROR 'remote cannot be blank'
[ -z "${user}" ] && ERROR 'user cannot be blank'
[ $# -ne 0 ] && USAGE 'extraneous extra arguments'

# enable debuging
[ X"${debug}" = X"yes" ] && set -x


# determine git url
[ -d '.git' ] || ERROR 'not a git repository: %s' "${PWD}"

if [ -z "${url}" ]
then
   url=$(git config --local --get "remote.${remote}.url")
   [ $? -ne 0 ] && ERROR 'git remote: "%s" not found' "${remote}"
fi

case "${url}" in
  (https://*)
    url="${url%.git}"
    url="${url%/}/commit"
    ;;
  (git@*)
    url="${url#git@}"
    url="https://${url%%:*}/${url#*:}"
    url="${url%.git}"
    url="${url%/}/commit"
    ;;
  (*)
    ERROR 'cannot handle git URL: "%s"' "${url}"
esac

VERBOSE 'git url: %s' "${url}"

# wait for bitmarkd ready
BITMARKD

# list
if [ X"${list}" = X"yes" ]
then
  SHOW-OWNERSHIP
  exit 0
fi

# status
if [ ! -z "${status}" ]
then
  SHOW-STATUS "${status}"
  exit 0
fi

# read password
password=
tty_state=
restore_tty() {
  [ -z "${tty_state}" ] || stty ${tty_state}
  tty_state=
}
trap restore_tty INT EXIT
tty_state=$(stty -g)
stty -echo
read -p 'password:' password
[ $? -eq 0 ] || exit 1
echo
restore_tty

VERBOSE 'logfile: %s' "${logfile}"

# extract all commits in reverse date order
# bitmarks from most recent commit and stops on duplicate
git log --date=iso8601-strict --date-order --format='%H %cI' | (
  i=0
  while read commit timestamp junk
  do
    i=$((i + 1))
    CLI -v "${user}" create -z -f "${url}/${commit}" -a "" -m "date\u0000${timestamp}" -q 1
    if [ $? -eq 0 ]
    then
      SET issue_id '.issueIds[0]'
      VERBOSE '%6d: commit: %s   date: %s  issue_id: %s' "${i}" "${commit}" "${timestamp}" "${issue_id}"
      LOG '%6d: commit: %s   date: %s  issue_id: %s' "${i}" "${commit}" "${timestamp}" "${issue_id}"
    else
      SET error '.error'
      VERBOSE '%6d: commit: %s   date: %s  error: %s' "${i}" "${commit}" "${timestamp}" "${error}"
      LOG '%6d: commit: %s   date: %s  error: %s' "${i}" "${commit}" "${timestamp}" "${error}"
      if [ X"${error}" = X"terminated with error: transaction already exists" ]
      then
        [ X"${continue}" = X"no" ] && break
      else
        break
      fi
    fi
  done
  printf 'total commits read: %d\n' "${i}"
)

# display the final results file
printf 'results written to logfile: %s\n' "${logfile}"
